[{"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\index.js":"1","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\App.js":"2","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\reportWebVitals.js":"3","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\map.jsx":"4","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mapBoston.jsx":"5","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\data\\map2.jsx":"6","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\municipalityMap.jsx":"7","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\box.jsx":"8","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\boxfunction.jsx":"9","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\boxfunction1.jsx":"10","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\smallProvince.jsx":"11"},{"size":500,"mtime":1606146612682,"results":"12","hashOfConfig":"13"},{"size":4666,"mtime":1611014137933,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1606146612682,"results":"15","hashOfConfig":"13"},{"size":6005,"mtime":1610562946292,"results":"16","hashOfConfig":"13"},{"size":2274,"mtime":1608232851551,"results":"17","hashOfConfig":"13"},{"size":3305,"mtime":1610563022744,"results":"18","hashOfConfig":"13"},{"size":3668,"mtime":1611012999885,"results":"19","hashOfConfig":"13"},{"size":1498,"mtime":1610741930308,"results":"20","hashOfConfig":"13"},{"size":1317,"mtime":1610908339355,"results":"21","hashOfConfig":"13"},{"size":1757,"mtime":1611012563416,"results":"22","hashOfConfig":"13"},{"size":1749,"mtime":1611014637260,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1qi1qn6",{"filePath":"27","messages":"28","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\index.js",[],["53","54"],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\App.js",["55","56","57","58","59","60","61","62"],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\reportWebVitals.js",[],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\map.jsx",["63","64","65","66","67"],"import React, {Component, createRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nclass Map extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.thismap = React.createRef();\r\n  }\r\n  async componentDidMount (error, info) {\r\n    //reading map data\r\n    // d3.json('data/overijssel.json')\r\n    //   .then(function (data) {\r\n    //     const map = data;\r\n    //     console.log(typeof map);\r\n    //     console.log(map);\r\n    //     return map;\r\n    //   })\r\n    //   .catch((err) => console.log(err.message));\r\n    \r\n    // // };\r\n    // // readingMapData('data/overijssel.json', function (mapp) {\r\n    // //   console.log(mapp.features);\r\n    // // });\r\n    // // readingMapData();\r\n    // // console.log(mmap.features);\r\n    // // console.log(readingMapData())\r\n    // // const mapp = readingMapData();\r\n    // // console.log(mapp.features)\r\n    const mapWidth = 600,\r\n      mapHeight = 1200;\r\n\r\n    // A function to set the projection\r\nconst map = this.props.map\r\n  }\r\n  // provinceMap();\r\n\r\n\r\n  render() {\r\n    console.log(this.props.data)\r\n    return (\r\n      <div>\r\n        <p>this is the map section</p>\r\n        <div ref={this.thismap}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\nexport default Map;\r\n\r\n//the next plan would be to add a mep of netherlands and assign it to the whole picture\r\n// const coordProjection = (\r\n//   translateX,\r\n//   translateY,\r\n//   scale = 200,\r\n//   lat = 6,\r\n//   long = 52.5\r\n// ) => {\r\n//   const myProjection = d3\r\n//     .geoMercator()\r\n//     .center([lat, long])\r\n//     .scale(scale)\r\n//     .translate([translateX, translateY]);\r\n//   return d3.geoPath().projection(myProjection);\r\n// };\r\n\r\n// const provinceMap = async (\r\n//   where = this.thismap.current,\r\n//   height,\r\n//   width,\r\n//   scale\r\n// ) => {\r\n//   console.log('this is province map');\r\n\r\n\r\n\r\n\r\n//   let mapsvg = d3\r\n//     .select(where)\r\n//     .append('svg')\r\n//     .attr('width', `${mapHeight}px`)\r\n//     .attr('height', `${mapWidth}px`)\r\n//     .style('border', '2px solid black')\r\n//     .append('g');\r\n\r\n//   let svgpath = coordProjection(mapWidth, mapHeight / 2 - 300);\r\n// //   const provincedata = async () => {\r\n\r\n// //     return await this.props.data;\r\n// //   }\r\n  \r\n\r\n//   }\r\n//  mapsvg\r\n//     .selectAll('path')\r\n//     .data(map.features)\r\n//     .enter()\r\n//     // for each d create an svgpath that uses the geoPath generator:\r\n//     .append('path')\r\n//     //   .attr('class', 'municipality')\r\n//     .attr('d', svgpath)\r\n//     .style('fill', 'white')\r\n//     .style('stroke', 'rgb(250, 200, 250)')\r\n//     .style('stroke-width', 2)\r\n    // //mouse events\r\n    // .on('mouseover', function (d, i) {\r\n    //   d3.select(this).style('fill', 'red');\r\n    // })\r\n    // .on('mouseout', function (d, i) {\r\n    //   d3.select(this).style('fill', 'white');\r\n    // })\r\n\r\n    // .on('click', function (d, i) {\r\n    //   //the layer shoud be off\r\n\r\n    //   //this remove works but not perfect, and it works good to remove all the shapes\r\n    //   // mapsvg.selectAll('path').remove();\r\n    //   mapsvg.remove();\r\n//       //this also works to change the whole color of the shape\r\n//       // mapsvg.selectAll('path').transition().style('fill', 'red');\r\n\r\n//       // .style('border', '20px solid black')\r\n//       //   .attr('width', `1000px`)\r\n//       // .attr('height', `1000px`)\r\n\r\n//       svgpath = coordProjection(50, 80, 7000);\r\n//       // const mapsvg = d3\r\n//       // .select(where)\r\n//       // .append('svg')\r\n//       // .attr('width', `${mapHeight}px`)\r\n//       // .attr('height', `${mapWidth}px`)\r\n//       // .style('border', '1px solid black')\r\n//       // .append('g');\r\n//       let mapsvg = d3\r\n//         .select(where)\r\n//         .append('svg')\r\n//         .attr('width', `200px`)\r\n//         .attr('height', `300px`)\r\n//         .style('border', '2px solid black')\r\n//         .append('g')\r\n//         .selectAll('path')\r\n//         .data(map.features)\r\n//         .enter()\r\n//         // for each d create an svgpath that uses the geoPath generator:\r\n//         .append('path')\r\n//         //   .attr('class', 'municipality')\r\n//         .attr('d', svgpath)\r\n//         .style('fill', 'white')\r\n//         .style('stroke', 'rgb(250, 200, 250)')\r\n//         .style('stroke-width', 2);\r\n\r\n//       // mapsvg.transition()\r\n//       // .duration(500).style('fill', 'white')\r\n//       //redraw the same layer in other place with the smaller scale\r\n//       // d3.select(this).scale(5000);\r\n//     });\r\n//   let mapsvg1 = d3\r\n//     .select(where)\r\n//     .append('svg')\r\n//     .attr('width', `200px`)\r\n//     .attr('height', `300px`)\r\n//     .attr('transform', `translate(0, -10)`)\r\n//     .style('border', '2px solid black')\r\n//     .append('g')\r\n//     .selectAll('path')\r\n//     .data(map.features)\r\n//     .enter()\r\n//     // for each d create an svgpath that uses the geoPath generator:\r\n//     .append('path')\r\n//     //   .attr('class', 'municipality')\r\n//     .attr('d', svgpath)\r\n//     .style('fill', 'white')\r\n//     .style('stroke', 'rgb(250, 200, 250)')\r\n//     .style('stroke-width', 2);\r\n// };\r\n\r\n// //mouse events functions\r\n// const mouseOverHandler = (d, i) => {\r\n//   console.log('mouseover');\r\n// };\r\n\r\n// const clickHandler = () => {\r\n//   //1- remove the main map\r\n//   //2- change it to the up left\r\n//   //3- draw a new small map\r\n//   //4- draom a new map for the next level, based on the selected polygone\r\n//   console.log('click');\r\n\r\n//   d3.select(this.thismap.current).selectAll('path').remove();\r\n//   // mapsvg\r\n//   //   .append('rect')\r\n//   //   .attr('width', `${20}px`)\r\n//   //   .attr('height', `${20}px`)\r\n//   //   .style('border', '1px solid black')\r\n//   //   .attr('transform', `translate(${0}, ${0})`);\r\n// };\r\n\r\n// const mouseOutHandler = () => {\r\n//   console.log('mouseout');\r\n// };\r\n\r\n// // asynchronously load geojson:\r\n// //reading data\r\n\r\n// // console.log(map.features);\r\n// const removeMap = (where) => {\r\n//   d3.select(where).selectAll('path').remove();\r\n// };\r\n// provinceMap();","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mapBoston.jsx",[],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\data\\map2.jsx",["68","69","70"],"import React, {Component, createRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nclass Map2 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.thismap = React.createRef();\r\n  }\r\n  componentDidMount(error, info) {\r\n    //reading map data\r\n    d3.json('data/geoserver.json')\r\n      .then(function (data) {\r\n        const map = data;\r\n        console.log(typeof map);\r\n        console.log(map);\r\n        return map;\r\n      })\r\n      .catch((err) => console.log(err.message));\r\n    // const data = await this.props.data;\r\n\r\n    // };\r\n    // readingMapData('data/overijssel.json', function (mapp) {\r\n    //   console.log(mapp.features);\r\n    // });\r\n    // readingMapData();\r\n    // console.log(mmap.features);\r\n    // console.log(readingMapData())\r\n    // const mapp = readingMapData();\r\n    // console.log(mapp.features)\r\n    const mapWidth = 350,\r\n      mapHeight = 400;\r\n\r\n    const provinceMap = async (\r\n      where = this.thismap.current,\r\n      height,\r\n      width,\r\n      scale\r\n    ) => {\r\n      console.log('this is province map');\r\n      const mapsvg = d3\r\n        .select(where)\r\n        .append('svg')\r\n        .attr('width', `${mapHeight}px`)\r\n        .attr('height', `${mapWidth}px`)\r\n        .style('border', '1px solid black')\r\n        .append('g');\r\n\r\n      const myProj = d3\r\n        .geoMercator()\r\n        .center([-10, 30])\r\n        .scale(60)\r\n        .translate([mapWidth / 2, mapHeight / 2]);\r\n\r\n      const svgpath = d3.geoPath().projection(myProj);\r\n      const map = await this.props.data;\r\n      mapsvg\r\n        .selectAll('path')\r\n        .data(map.features)\r\n        .enter()\r\n        // for each d create an svgpath that uses the geoPath generator:\r\n        .append('path')\r\n        //   .attr('class', 'municipality')\r\n        .attr('d', svgpath)\r\n        .style('fill', 'white')\r\n        .style('stroke', 'rgb(250, 200, 250)')\r\n        .style('stroke-width', 2)\r\n        //mouse events\r\n        .on('mouseover', mouseOverHandler)\r\n        .on('mouseout', mouseOutHandler)\r\n        .on('click', clickHandler);\r\n    };\r\n\r\n    //mouse events functions\r\n    const mouseOverHandler = (d, i) => {\r\n      console.log('mouseover');\r\n    };\r\n\r\n    const clickHandler = () => {\r\n      //1- remove the main map\r\n      //2- change it to the up left\r\n      //3- draw a new small map\r\n      //4- draom a new map for the next level, based on the selected polygone\r\n      console.log('click');\r\n\r\n      d3.select(this.thismap.current).selectAll('path').remove();\r\n      // mapsvg\r\n      //   .append('rect')\r\n      //   .attr('width', `${20}px`)\r\n      //   .attr('height', `${20}px`)\r\n      //   .style('border', '1px solid black')\r\n      //   .attr('transform', `translate(${0}, ${0})`);\r\n    };\r\n\r\n    const mouseOutHandler = () => {\r\n      console.log('mouseout');\r\n    };\r\n\r\n    // asynchronously load geojson:\r\n    //reading data\r\n\r\n    // console.log(map.features);\r\n    const removeMap = (where) => {\r\n      d3.select(where).selectAll('path').remove();\r\n    };\r\n    // provinceMap();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>this is the map2 section</p>\r\n        <div ref={this.thismap}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map2;\r\n\r\n//the next plan would be to add a mep of netherlands and assign it to the whole picture\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\municipalityMap.jsx",["71"],"import React, {Component, createRef} from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as turf from '@turf/turf';\r\n\r\nclass MunicipalityMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  resizeObserver = null;\r\n  thismap = createRef();\r\n  state = {cit: ''};\r\n  async componentDidMount(error, info) {\r\n    // this.props.cityName('Enschede')\r\n    //reading map data\r\n    // d3.json('data/Mun-2.geojson')\r\n    //   .then(function (data) {\r\n    //     const map = data;\r\n    //     console.log(typeof map);\r\n    //     console.log(map);\r\n    //     return map;\r\n    //   })\r\n    //   .catch((err) => console.log(err.message));\r\n    const handle = (name) => {\r\n      console.log(name);\r\n      this.handleclick(name);\r\n    };\r\n    if ('ResizeObserver' in window) {\r\n      this.observe(ResizeObserver);\r\n    } else {\r\n      import('resize-observer-polyfill').then(this.observe);\r\n    }\r\n    // };\r\n    // readingMapData('data/overijssel.json', function (mapp) {\r\n    //   console.log(mapp.features);\r\n    // });\r\n    // readingMapData();\r\n    // console.log(mmap.features);\r\n    // console.log(readingMapData())\r\n    // const mapp = readingMapData();\r\n    // console.log(mapp.features)\r\n\r\n    const width = 400;\r\n    const height = 400;\r\n\r\n    // const provinceMap = async (\r\n    //   where = this.thismap.current,\r\n    //   height = mapHeight,\r\n    //   width = mapWidth\r\n    // ) => {\r\n    //   console.log('this is province map');\r\n    const mapsvg = d3\r\n      .select(this.thismap.current)\r\n      .append('svg')\r\n      .attr('width', `${height}px`)\r\n      .attr('height', `${width}px`)\r\n      .style('border', '1px solid black')\r\n      .append('g');\r\n\r\n    const map = await d3.json('data/overijssel.json');\r\n    \r\n    const myProj = d3\r\n      .geoMercator()\r\n      .center(turf.centroid(map).geometry.coordinates)\r\n      .scale(10000)\r\n      .translate([width / 2, height / 2]);\r\n\r\n    const svgpath = d3.geoPath().projection(myProj);\r\n    //to load a file successfully it's coordinates should be transfered to wgs84 4326\r\n    let mapfeatuer = {};\r\n\r\n    console.log(mapfeatuer);\r\n    mapsvg\r\n      .selectAll('path')\r\n      .data(map.features)\r\n      .enter()\r\n      // for each d create an svgpath that uses the geoPath generator:\r\n      .append('path')\r\n      //   .attr('class', 'municipality')\r\n      .attr('d', svgpath)\r\n      .style('fill', 'black')\r\n      .style('stroke', 'rgb(250, 200, 250)')\r\n      .style('stroke-width', 2)\r\n      //mouse events\r\n      .on('mouseover', function (d, i) {\r\n        d3.select(this).style('fill', 'red');\r\n        handle(i.properties.gm_naam);\r\n      })\r\n      .on('mouseout', function (d, i) {\r\n        d3.select(this).style('fill', 'white');\r\n      })\r\n      .on('click', function (d, i) {\r\n        console.log(i.properties.gm_naam);\r\n      });\r\n\r\n    // provinceMap();\r\n    console.log(map.features);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.resizeObserver) {\r\n      this.resizeObserver.disconnect();\r\n    }\r\n  }\r\n\r\n  observe = (RO) => {\r\n    this.resizeObserver = new RO((entries) => {\r\n      const {width, height, top, right, bottom, left} = entries[0].contentRect;\r\n      this.setState({width, height, top, right, bottom, left});\r\n    });\r\n\r\n    if (this.thismap.current) {\r\n      this.resizeObserver.observe(this.thismap.current);\r\n    }\r\n  };\r\n\r\n  handleclick = (name) => {\r\n    this.props.cityName(name);\r\n  };\r\n  handle = (name) => {\r\n    console.log(name);\r\n    this.handleclick(name);\r\n  };\r\n  render() {\r\n    return <div ref={this.thismap}></div>;\r\n  }\r\n}\r\n\r\nexport default MunicipalityMap;\r\n\r\n//the next plan would be to add a mep of netherlands and assign it to the whole picture\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\box.jsx",["72","73","74"],"import React, {Component, createRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nclass Box extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  resizeObserver = null;\r\n  thismap = createRef();\r\n  state = {};\r\n  async componentDidMount(error, info) {\r\n    if ('ResizeObserver' in window) {\r\n      this.observe(ResizeObserver);\r\n    } else {\r\n      import('resize-observer-polyfill').then(this.observe);\r\n    }\r\n    async function Read() {}\r\n    const width = 400\r\n    const height = 400\r\n\r\n    const mapsvg = d3\r\n      .select(this.thismap.current)\r\n      .append('svg')\r\n      .attr('width', `${width}px`)\r\n      .attr('height', `${height}px`)\r\n      .style('border', '3px solid black')\r\n      .append('g');\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.resizeObserver) {\r\n      this.resizeObserver.disconnect();\r\n    }\r\n  }\r\n\r\n  observe = (RO) => {\r\n    this.resizeObserver = new RO((entries) => {\r\n      const {width, height, top, right, bottom, left} = entries[0].contentRect;\r\n      this.setState({width, height, top, right, bottom, left});\r\n    });\r\n\r\n    if (this.thismap.current) {\r\n      this.resizeObserver.observe(this.thismap.current);\r\n    }\r\n  };\r\n\r\n  render() {\r\n      console.log(this.state.height, this.state.width)\r\n    return (\r\n      \r\n        <div ref={this.thismap} className=\"border border-dark\">{this.mapsvg}</div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Box;\r\n\r\n//the next plan would be to add a mep of netherlands and assign it to the whole picture\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\boxfunction.jsx",["75","76"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n\r\nexport default function Boxfunction({width, height}) {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(async() => {\r\n\r\n\r\n    //removing svg\r\n    d3.select(svgRef.current).select('*').remove();\r\n    console.log(height, width)\r\n    //draw svg\r\n    const mapsvg1 = d3\r\n      .select(svgRef.current)\r\n      .append('svg')\r\n      .attr('width', `${width}px`)\r\n      .attr('height', `${width}px`)\r\n      .style('border', '2px solid black')\r\n      .append('g')\r\n\r\n      const myProj = d3\r\n      .geoMercator()\r\n      .center([6.0, 51.5])\r\n      .scale(3500)\r\n      .translate([width / 2, height / 2]);\r\n\r\n    const svgpath = d3.geoPath().projection(myProj);\r\n    //to load a file successfully it's coordinates should be transfered to wgs84 4326\r\n    const map = await d3.json('data/ov.json');\r\n    mapsvg1\r\n      .selectAll('path')\r\n      .data(map.features)\r\n      .enter()\r\n      // for each d create an svgpath that uses the geoPath generator:\r\n      .append('path')\r\n      //   .attr('class', 'municipality')\r\n      .attr('d', svgpath)\r\n      .style('fill', 'white')\r\n      .style('stroke', 'rgb(250, 200, 250)')\r\n      .style('stroke-width', 2)\r\n      \r\n  }, [height, width]);\r\n\r\n  return <div id=\"svg-chart\" ref={svgRef}></div>;\r\n}\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\boxfunction1.jsx",["77"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as turf from '@turf/turf'\r\n\r\nexport default function Boxfunction1({city, width, height}) {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    //removing svg\r\n    d3.select(svgRef.current).select('*').remove();\r\n    console.log(height, width, city);\r\n    //draw svg\r\n    const mapsvg = d3\r\n      .select(svgRef.current)\r\n      .append('svg')\r\n      .attr('width', `${width}px`)\r\n      .attr('height', `${width}px`)\r\n      .style('border', '2px solid black')\r\n      .append('g');\r\n\r\n      let mapfeatuer = {}\r\n      d3.json('data/overijssel.json').then((map) => {\r\n        for (let feature of map.features) {\r\n          // console.log(feature)\r\n          if (feature.properties.gm_naam === city) {\r\n            mapfeatuer = feature\r\n            var centroid = turf.centroid(mapfeatuer);\r\n            console.log(centroid)\r\n          }\r\n        }\r\n    const myProj = d3\r\n      .geoMercator()\r\n      .center(centroid ? centroid.geometry.coordinates : [0, 0])\r\n      .scale(15000)\r\n      .translate([width / 2, width / 2]);\r\n\r\n    const svgpath = d3.geoPath().projection(myProj);\r\n    //to load a file successfully it's coordinates should be transfered to wgs84 4326\r\n        mapsvg\r\n        .selectAll('path')\r\n        .data([mapfeatuer])\r\n        .enter()\r\n        // for each d create an svgpath that uses the geoPath generator:\r\n        .append('path')\r\n        //   .attr('class', 'municipality')\r\n        .attr('d', svgpath)\r\n        .style('fill', 'rgb(250, 200, 250)')\r\n        .style('stroke', 'rgb(250, 200, 250)')\r\n        .style('stroke-width', 2);\r\n    })\r\n    \r\n  }, [height, width, city]);\r\n\r\n  return <div id=\"svg-chart\" ref={svgRef}></div>;\r\n}\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\smallProvince.jsx",["78"],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":5,"column":8,"nodeType":"85","messageId":"86","endLine":5,"endColumn":15},{"ruleId":"83","severity":1,"message":"87","line":7,"column":8,"nodeType":"85","messageId":"86","endLine":7,"endColumn":11},{"ruleId":"83","severity":1,"message":"88","line":9,"column":8,"nodeType":"85","messageId":"86","endLine":9,"endColumn":16},{"ruleId":"83","severity":1,"message":"89","line":10,"column":8,"nodeType":"85","messageId":"86","endLine":10,"endColumn":11},{"ruleId":"83","severity":1,"message":"90","line":11,"column":8,"nodeType":"85","messageId":"86","endLine":11,"endColumn":17},{"ruleId":"83","severity":1,"message":"91","line":12,"column":8,"nodeType":"85","messageId":"86","endLine":12,"endColumn":12},{"ruleId":"83","severity":1,"message":"92","line":14,"column":8,"nodeType":"85","messageId":"86","endLine":14,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":19,"column":3,"nodeType":"95","messageId":"96","endLine":21,"endColumn":4},{"ruleId":"83","severity":1,"message":"97","line":1,"column":27,"nodeType":"85","messageId":"86","endLine":1,"endColumn":36},{"ruleId":"83","severity":1,"message":"98","line":2,"column":13,"nodeType":"85","messageId":"86","endLine":2,"endColumn":15},{"ruleId":"83","severity":1,"message":"99","line":29,"column":11,"nodeType":"85","messageId":"86","endLine":29,"endColumn":19},{"ruleId":"83","severity":1,"message":"100","line":30,"column":7,"nodeType":"85","messageId":"86","endLine":30,"endColumn":16},{"ruleId":"83","severity":1,"message":"101","line":33,"column":7,"nodeType":"85","messageId":"86","endLine":33,"endColumn":10},{"ruleId":"83","severity":1,"message":"97","line":1,"column":27,"nodeType":"85","messageId":"86","endLine":1,"endColumn":36},{"ruleId":"83","severity":1,"message":"102","line":33,"column":11,"nodeType":"85","messageId":"86","endLine":33,"endColumn":22},{"ruleId":"83","severity":1,"message":"103","line":102,"column":11,"nodeType":"85","messageId":"86","endLine":102,"endColumn":20},{"ruleId":"93","severity":1,"message":"94","line":6,"column":3,"nodeType":"95","messageId":"96","endLine":8,"endColumn":4},{"ruleId":"93","severity":1,"message":"94","line":5,"column":3,"nodeType":"95","messageId":"96","endLine":7,"endColumn":4},{"ruleId":"83","severity":1,"message":"104","line":17,"column":20,"nodeType":"85","messageId":"86","endLine":17,"endColumn":24},{"ruleId":"83","severity":1,"message":"105","line":21,"column":11,"nodeType":"85","messageId":"86","endLine":21,"endColumn":17},{"ruleId":"83","severity":1,"message":"106","line":1,"column":16,"nodeType":"85","messageId":"86","endLine":1,"endColumn":24},{"ruleId":"107","severity":1,"message":"108","line":8,"column":13,"nodeType":"109","endLine":44,"endColumn":4},{"ruleId":"83","severity":1,"message":"106","line":1,"column":16,"nodeType":"85","messageId":"86","endLine":1,"endColumn":24},{"ruleId":"83","severity":1,"message":"106","line":1,"column":16,"nodeType":"85","messageId":"86","endLine":1,"endColumn":24},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'datamap' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'ReactDOM' is defined but never used.","'Map' is defined but never used.","'MapBoston' is defined but never used.","'Map2' is defined but never used.","'Boxfunction' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'createRef' is defined but never used.","'d3' is defined but never used.","'mapWidth' is assigned a value but never used.","'mapHeight' is assigned a value but never used.","'map' is assigned a value but never used.","'provinceMap' is assigned a value but never used.","'removeMap' is assigned a value but never used.","'Read' is defined but never used.","'mapsvg' is assigned a value but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-global-assign","no-unsafe-negation"]