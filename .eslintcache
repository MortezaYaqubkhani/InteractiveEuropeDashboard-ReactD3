[{"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\index.js":"1","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\App.js":"2","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\reportWebVitals.js":"3","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\map.jsx":"4","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mapBoston.jsx":"5","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\data\\map2.jsx":"6","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\municipalityMap.jsx":"7"},{"size":500,"mtime":1606146612682,"results":"8","hashOfConfig":"9"},{"size":408,"mtime":1608842268273,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1606146612682,"results":"11","hashOfConfig":"9"},{"size":6244,"mtime":1610055101915,"results":"12","hashOfConfig":"9"},{"size":2274,"mtime":1608232851551,"results":"13","hashOfConfig":"9"},{"size":3249,"mtime":1608831474668,"results":"14","hashOfConfig":"9"},{"size":3499,"mtime":1609793940057,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1qi1qn6",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\index.js",[],["34","35"],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\App.js",["36"],"import React from 'react';\nimport './App.css';\n\nimport Map from './component/map';\nimport MapBoston from './component/mapBoston';\nimport Map2 from './component/data/map2';\nimport MunicipalityMap from './component/municipalityMap';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Map />\n      <Map2 />\n      <MunicipalityMap />\n      {/* <MapBoston /> */}\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\reportWebVitals.js",[],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\map.jsx",["37","38","39","40","41","42","43","44","45"],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mapBoston.jsx",[],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\data\\map2.jsx",["46","47"],"import React, {Component, createRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nclass Map2 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.thismap = React.createRef();\r\n  }\r\n  componentDidMount(error, info) {\r\n    //reading map data\r\n     d3.json('data/geoserver.json').then(function (data) {\r\n      const map = data;\r\n      console.log(typeof(map))\r\n      console.log(map)\r\n      return map\r\n    }).catch(err => console.log(err.message));\r\n\r\n    \r\n    // };\r\n    // readingMapData('data/overijssel.json', function (mapp) {\r\n    //   console.log(mapp.features);\r\n    // });\r\n    // readingMapData();\r\n    // console.log(mmap.features);\r\n    // console.log(readingMapData())\r\n    // const mapp = readingMapData();\r\n    // console.log(mapp.features)\r\n    const mapWidth = 350,\r\n      mapHeight = 400;\r\n\r\n    const provinceMap = async (\r\n      where = this.thismap.current,\r\n      height,\r\n      width,\r\n      scale\r\n    ) => {\r\n      console.log('this is province map');\r\n      const mapsvg = d3\r\n        .select(where)\r\n        .append('svg')\r\n        .attr('width', `${mapHeight}px`)\r\n        .attr('height', `${mapWidth}px`)\r\n        .style('border', '1px solid black')\r\n        .append('g');\r\n\r\n      const myProj = d3\r\n        .geoMercator()\r\n        .center([-10, 30])\r\n        .scale(60)\r\n        .translate([mapWidth / 2, mapHeight / 2]);\r\n\r\n      const svgpath = d3.geoPath().projection(myProj);\r\n      const map = await d3.json('data/geoserver.json');\r\n      mapsvg\r\n        .selectAll('path')\r\n        .data(map.features)\r\n        .enter()\r\n        // for each d create an svgpath that uses the geoPath generator:\r\n        .append('path')\r\n        //   .attr('class', 'municipality')\r\n        .attr('d', svgpath)\r\n        .style('fill', 'white')\r\n        .style('stroke', 'rgb(250, 200, 250)')\r\n        .style('stroke-width', 2)\r\n        //mouse events\r\n        .on('mouseover', mouseOverHandler)\r\n        .on('mouseout', mouseOutHandler)\r\n        .on('click', clickHandler);\r\n    };\r\n\r\n    //mouse events functions\r\n    const mouseOverHandler = (d, i) => {\r\n      console.log('mouseover');\r\n    };\r\n\r\n    const clickHandler = () => {\r\n      //1- remove the main map\r\n      //2- change it to the up left\r\n      //3- draw a new small map\r\n      //4- draom a new map for the next level, based on the selected polygone\r\n      console.log('click');\r\n\r\n      d3.select(this.thismap.current).selectAll('path').remove();\r\n      // mapsvg\r\n      //   .append('rect')\r\n      //   .attr('width', `${20}px`)\r\n      //   .attr('height', `${20}px`)\r\n      //   .style('border', '1px solid black')\r\n      //   .attr('transform', `translate(${0}, ${0})`);\r\n    };\r\n\r\n    const mouseOutHandler = () => {\r\n      console.log('mouseout');\r\n    };\r\n\r\n    // asynchronously load geojson:\r\n    //reading data\r\n\r\n    // console.log(map.features);\r\n    const removeMap = (where) => {\r\n      d3.select(where).selectAll('path').remove();\r\n    };\r\n    provinceMap();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>this is the map section</p>\r\n        <div ref={this.thismap}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map2;\r\n\r\n//the next plan would be to add a mep of netherlands and assign it to the whole picture\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\municipalityMap.jsx",["48","49","50","51"],"import React, {Component, createRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nclass MunicipalityMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.thismap = React.createRef();\r\n  }\r\n  componentDidMount(error, info) {\r\n    //reading map data\r\n     d3.json('data/Mun-2.geojson').then(function (data) {\r\n      const map = data;\r\n      console.log(typeof(map))\r\n      console.log(map)\r\n      return map\r\n    }).catch(err => console.log(err.message));\r\n\r\n    \r\n    // };\r\n    // readingMapData('data/overijssel.json', function (mapp) {\r\n    //   console.log(mapp.features);\r\n    // });\r\n    // readingMapData();\r\n    // console.log(mmap.features);\r\n    // console.log(readingMapData())\r\n    // const mapp = readingMapData();\r\n    // console.log(mapp.features)\r\n    const mapWidth = 350,\r\n      mapHeight = 400;\r\n\r\n    const provinceMap = async (\r\n      where = this.thismap.current,\r\n      height,\r\n      width,\r\n      scale\r\n    ) => {\r\n      console.log('this is province map');\r\n      const mapsvg = d3\r\n        .select(where)\r\n        .append('svg')\r\n        .attr('width', `${mapHeight}px`)\r\n        .attr('height', `${mapWidth}px`)\r\n        .style('border', '1px solid black')\r\n        .append('g');\r\n\r\n      const myProj = d3\r\n        .geoMercator()\r\n        .center([6.0, 51.5])\r\n        .scale(3500)\r\n        .translate([mapWidth / 2, mapHeight / 2]);\r\n\r\n      const svgpath = d3.geoPath().projection(myProj);\r\n      //to load a file successfully it's coordinates should be transfered to wgs84 4326\r\n      const map = await d3.json('data/Mun-2.geojson');\r\n      mapsvg\r\n        .selectAll('path')\r\n        .data(map.features)\r\n        .enter()\r\n        // for each d create an svgpath that uses the geoPath generator:\r\n        .append('path')\r\n        //   .attr('class', 'municipality')\r\n        .attr('d', svgpath)\r\n        .style('fill', 'white')\r\n        .style('stroke', 'rgb(250, 200, 250)')\r\n        .style('stroke-width', 2)\r\n        //mouse events\r\n        .on('mouseover', function(d, i) {\r\n          d3.select(this).style('fill', 'red');\r\n        })\r\n        .on('mouseout', function(d, i) {\r\n          d3.select(this).style('fill', 'white');\r\n        })\r\n        .on('click', clickHandler);\r\n    };\r\n\r\n    //mouse events functions\r\n    const mouseOverHandler = (d, i) => {\r\n      // d3.select(this).style('fill', 'red')\r\n    };\r\n\r\n    const clickHandler = () => {\r\n      //1- remove the main map\r\n      //2- change it to the up left\r\n      //3- draw a new small map\r\n      //4- draom a new map for the next level, based on the selected polygone\r\n      console.log('click');\r\n\r\n      d3.select(this.thismap.current).selectAll('path').remove();\r\n      // mapsvg\r\n      //   .append('rect')\r\n      //   .attr('width', `${20}px`)\r\n      //   .attr('height', `${20}px`)\r\n      //   .style('border', '1px solid black')\r\n      //   .attr('transform', `translate(${0}, ${0})`);\r\n    };\r\n\r\n    const mouseOutHandler = () => {\r\n      console.log('mouseout');\r\n    };\r\n\r\n    // asynchronously load geojson:\r\n    //reading data\r\n\r\n    // console.log(map.features);\r\n    const removeMap = (where) => {\r\n      d3.select(where).selectAll('path').remove();\r\n    };\r\n    provinceMap();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>this is the map section</p>\r\n        <div ref={this.thismap}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MunicipalityMap;\r\n\r\n//the next plan would be to add a mep of netherlands and assign it to the whole picture\r\n",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":5,"column":8,"nodeType":"58","messageId":"59","endLine":5,"endColumn":17},{"ruleId":"56","severity":1,"message":"60","line":1,"column":27,"nodeType":"58","messageId":"59","endLine":1,"endColumn":36},{"ruleId":"56","severity":1,"message":"61","line":56,"column":11,"nodeType":"58","messageId":"59","endLine":56,"endColumn":18},{"ruleId":"56","severity":1,"message":"62","line":75,"column":11,"nodeType":"58","messageId":"59","endLine":75,"endColumn":19},{"ruleId":"56","severity":1,"message":"63","line":118,"column":15,"nodeType":"58","messageId":"59","endLine":118,"endColumn":21},{"ruleId":"56","severity":1,"message":"64","line":141,"column":11,"nodeType":"58","messageId":"59","endLine":141,"endColumn":18},{"ruleId":"56","severity":1,"message":"65","line":162,"column":11,"nodeType":"58","messageId":"59","endLine":162,"endColumn":27},{"ruleId":"56","severity":1,"message":"66","line":166,"column":11,"nodeType":"58","messageId":"59","endLine":166,"endColumn":23},{"ruleId":"56","severity":1,"message":"67","line":182,"column":11,"nodeType":"58","messageId":"59","endLine":182,"endColumn":26},{"ruleId":"56","severity":1,"message":"68","line":190,"column":11,"nodeType":"58","messageId":"59","endLine":190,"endColumn":20},{"ruleId":"56","severity":1,"message":"60","line":1,"column":27,"nodeType":"58","messageId":"59","endLine":1,"endColumn":36},{"ruleId":"56","severity":1,"message":"68","line":100,"column":11,"nodeType":"58","messageId":"59","endLine":100,"endColumn":20},{"ruleId":"56","severity":1,"message":"60","line":1,"column":27,"nodeType":"58","messageId":"59","endLine":1,"endColumn":36},{"ruleId":"56","severity":1,"message":"65","line":77,"column":11,"nodeType":"58","messageId":"59","endLine":77,"endColumn":27},{"ruleId":"56","severity":1,"message":"67","line":97,"column":11,"nodeType":"58","messageId":"59","endLine":97,"endColumn":26},{"ruleId":"56","severity":1,"message":"68","line":105,"column":11,"nodeType":"58","messageId":"59","endLine":105,"endColumn":20},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'MapBoston' is defined but never used.","Identifier","unusedVar","'createRef' is defined but never used.","'mapsvg2' is assigned a value but never used.","'svgpath1' is assigned a value but never used.","'mapsvg' is assigned a value but never used.","'mapsvg1' is assigned a value but never used.","'mouseOverHandler' is assigned a value but never used.","'clickHandler' is assigned a value but never used.","'mouseOutHandler' is assigned a value but never used.","'removeMap' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]