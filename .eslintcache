[{"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\index.js":"1","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\App.js":"2","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\reportWebVitals.js":"3","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\map.jsx":"4","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mapBoston.jsx":"5","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\data\\map2.jsx":"6","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\box.jsx":"7","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\boxfunction.jsx":"8","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\boxfunction1.jsx":"9","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\smallProvince.jsx":"10","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\tools\\pathProjection.jsx":"11","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\MainWorld.jsx":"12","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\smallWorld.jsx":"13","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mainCountry.jsx":"14","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mainProvince.jsx":"15","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\smallCountry.jsx":"16","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\barChart.jsx":"17","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\pieChart.jsx":"18","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mainCity.jsx":"19","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\cityChart.jsx":"20","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\cityBarChart.jsx":"21"},{"size":500,"mtime":1606146612682,"results":"22","hashOfConfig":"23"},{"size":9539,"mtime":1624790822605,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1606146612682,"results":"25","hashOfConfig":"23"},{"size":6005,"mtime":1610562946292,"results":"26","hashOfConfig":"23"},{"size":2274,"mtime":1608232851551,"results":"27","hashOfConfig":"23"},{"size":3305,"mtime":1610563022744,"results":"28","hashOfConfig":"23"},{"size":1498,"mtime":1610741930308,"results":"29","hashOfConfig":"23"},{"size":1317,"mtime":1610908339355,"results":"30","hashOfConfig":"23"},{"size":1758,"mtime":1612133890335,"results":"31","hashOfConfig":"23"},{"size":2212,"mtime":1613424764147,"results":"32","hashOfConfig":"23"},{"size":344,"mtime":1611697521754,"results":"33","hashOfConfig":"23"},{"size":4398,"mtime":1613516875743,"results":"34","hashOfConfig":"23"},{"size":1873,"mtime":1613424764148,"results":"35","hashOfConfig":"23"},{"size":5191,"mtime":1613424764143,"results":"36","hashOfConfig":"23"},{"size":5221,"mtime":1613424764145,"results":"37","hashOfConfig":"23"},{"size":2219,"mtime":1613424764146,"results":"38","hashOfConfig":"23"},{"size":4931,"mtime":1624793254943,"results":"39","hashOfConfig":"23"},{"size":6323,"mtime":1612908564833,"results":"40","hashOfConfig":"23"},{"size":4243,"mtime":1613424764142,"results":"41","hashOfConfig":"23"},{"size":20986,"mtime":1624784851001,"results":"42","hashOfConfig":"23"},{"size":19527,"mtime":1624784656987,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qbam3g",{"filePath":"46","messages":"47","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":1,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":"102"},"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\index.js",[],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\App.js",["103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121"],"import React, {Component, createRef} from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\nimport datamap from './component/data/overijssel.json';\r\nimport datamap1 from './component/data/geoserver.json';\r\nimport Box from './component/box';\r\nimport * as d3 from 'd3';\r\nimport ReactDOM from 'react-dom';\r\nimport Map from './component/map';\r\nimport MapBoston from './component/mapBoston';\r\nimport Map2 from './component/data/map2';\r\nimport MainProvince from './component/mainProvince';\r\nimport Boxfunction from './component/boxfunction';\r\nimport Boxfunction1 from './component/boxfunction1';\r\nimport SmallProvince from './component/smallProvince';\r\nimport MainWorld from './component/MainWorld';\r\nimport SmallWorld from './component/smallWorld';\r\nimport MainCountry from './component/mainCountry';\r\nimport MainCity from './component/mainCity';\r\nimport SmallCountry from './component/smallCountry';\r\nimport BarChart from './component/barChart';\r\nimport PieChart from './component/pieChart';\r\nimport CityChart from './component/cityChart';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  resizeObserver = null;\r\n  resizeSubject = createRef();\r\n  state = {\r\n    mainWindow: 'worldMap',\r\n    worldData: {},\r\n    country: '',\r\n    countryOverMap: '',\r\n    countryOverPiechart: '',\r\n    countryOverBarchart: '',\r\n    province: '',\r\n    city: '',\r\n    // city: {name: '', data: ''},\r\n    nameofcity: '',\r\n    //for screen size\r\n    contentHeight: 0,\r\n    contentWidht: 0,\r\n    width: 0,\r\n    height: 0,\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n  };\r\n  componentDidMount(error, info) {\r\n    //loading the world map data\r\n    // d3.json('component/data/overijssel.json')\r\n    //   .then(function (data) {\r\n    //     // const map = data;\r\n    //     console.log(data);\r\n    //     // console.log(typeof map);\r\n    //     // console.log(map);\r\n    //     // return map;\r\n    //   })\r\n    //   .catch((err) => console.log(err.message));\r\n    this.setState({worldData: datamap1});\r\n    // async function loadWorldData() {\r\n    //   return await d3.json('component/data/overijssel.json');\r\n    // }\r\n    // this.setState({worldData: loadWorldData()});\r\n    // console.log(this.state.worldData);\r\n    // this.content &&\r\n    //   this.setState({\r\n    //     contentHeight: measureElement(this.content).height,\r\n    //     contentWidht: measureElement(this.content).width,\r\n    //   });\r\n    // console.log(this.state.contentHeight);\r\n    if ('ResizeObserver' in window) {\r\n      this.observe(ResizeObserver);\r\n    } else {\r\n      import('resize-observer-polyfill').then(this.observe);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.resizeObserver) {\r\n      this.resizeObserver.disconnect();\r\n    }\r\n  }\r\n\r\n  observe = (RO) => {\r\n    this.resizeObserver = new RO((entries) => {\r\n      const {width, height, top, right, bottom, left} = entries[0].contentRect;\r\n      this.setState({width, height, top, right, bottom, left});\r\n    });\r\n\r\n    if (this.resizeSubject.current) {\r\n      this.resizeObserver.observe(this.resizeSubject.current);\r\n    }\r\n  };\r\n\r\n  handleCity = (city) => {\r\n    this.setState({nameofcity: city});\r\n  };\r\n\r\n  handleCountry = (country) => {\r\n    country = country;\r\n    this.setState({country});\r\n    console.log(country);\r\n    //to change the main window map\r\n    this.setState({mainWindow: 'countryMap'});\r\n    // this.setState({nameofcity: city});\r\n  };\r\n\r\n  handleCountryOverMap = (countryOverMap) => {\r\n    countryOverMap = countryOverMap;\r\n    this.setState({countryOverMap});\r\n    console.log(this.state.countryOverMap);\r\n    //to change the main window map\r\n    // this.setState({mainWindow: 'countryMap'});\r\n    // this.setState({nameofcity: city});\r\n  };\r\n\r\n  handleCountryOverBarchart = (countryOverBarchart) => {\r\n    countryOverBarchart = countryOverBarchart;\r\n    this.setState({countryOverBarchart});\r\n    console.log(this.state.countryOverBarchart);\r\n    //to change the main window map\r\n    // this.setState({mainWindow: 'countryMap'});\r\n    // this.setState({nameofcity: city});\r\n  };\r\n\r\n  handleProvince = (province) => {\r\n    province = province;\r\n    this.setState({province});\r\n    console.log(province);\r\n    //to change the main window map\r\n    this.setState({mainWindow: 'provinceMap'});\r\n    // this.setState({nameofcity: city});\r\n  };\r\n\r\n  handleSmallWorld = () => {\r\n    //set the main window\r\n    this.setState({mainWindow: 'worldMap'});\r\n    //earse the country, province, and city names\r\n    this.setState({country: '', province: '', city: ''});\r\n    // this.setState({nameofcity: city});\r\n  };\r\n\r\n  handleSmallCountry = () => {\r\n    //set the main window\r\n    this.setState({mainWindow: 'countryMap'});\r\n    //earse the small world window\r\n    this.setState({province: '', city: ''});\r\n    // this.setState({nameofcity: city});\r\n  };\r\n\r\n  handleSmallProvince = () => {\r\n    //set the main window\r\n    this.setState({mainWindow: 'provinceMap'});\r\n    //earse the small world window\r\n    this.setState({city: ''});\r\n    // this.setState({nameofcity: city});\r\n  };\r\n\r\n  handleCity = (city) => {\r\n    city = city;\r\n    this.setState({city});\r\n    console.log(city);\r\n    //to change the main window map\r\n    this.setState({mainWindow: 'cityMap'});\r\n    // this.setState({nameofcity: city});\r\n  };\r\n  render() {\r\n    const window = {width: this.state.width, height: this.state.height};\r\n    const country = this.state.country;\r\n    const province = this.state.province;\r\n    const city = this.state.city;\r\n    const mainWindow = this.state.mainWindow;\r\n    const mWidth = 490;\r\n    const mHeight = 520;\r\n    const sWidth = 170;\r\n    const sHeight = 160;\r\n    const cWidth = 660;\r\n    const cHeight = 160;\r\n    const cityWidth = 245;\r\n    const cityHeight = 255;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Container\r\n          className=\"container border\"\r\n          border=\"primary\"\r\n          ref={this.resizeSubject}\r\n        >\r\n          <Row>\r\n            <Col id=\"small-maps\" xs={3}>\r\n              <Row id=\"world-small-map\">\r\n                {country ? (\r\n                  <SmallWorld\r\n                    handleClick={this.handleSmallWorld}\r\n                    country={country}\r\n                    width={sWidth}\r\n                    height={sHeight}\r\n                  />\r\n                ) : (\r\n                  <p></p>\r\n                )}\r\n                {/* <MunicipalityMap window={window.width/4, window.height/4} />\r\n\r\n                <Boxfunction1\r\n                  city={this.state.nameofcity}\r\n                  height={1}\r\n                  width={window.width / 4}\r\n                /> */}\r\n              </Row>\r\n              <Row id=\"country-small-map\">\r\n                {country && province ? (\r\n                  <SmallCountry\r\n                    handleClick={this.handleSmallCountry}\r\n                    country={country}\r\n                    province={province}\r\n                    width={sWidth}\r\n                    height={sHeight}\r\n                  />\r\n                ) : (\r\n                  <p>{province}</p>\r\n                )}\r\n              </Row>\r\n              <Row id=\"province-small-map\">\r\n                {city && province && country ? (\r\n                  <SmallProvince\r\n                    province={province}\r\n                    height={sHeight}\r\n                    width={sWidth}\r\n                    city={city}\r\n                    handleClick={this.handleSmallProvince}\r\n                  />\r\n                ) : (\r\n                  <p></p>\r\n                )}\r\n              </Row>\r\n            </Col>\r\n            <Col className=\"world\" xs={9}>\r\n              {mainWindow === 'worldMap' ? (\r\n                <MainWorld\r\n                  height={mHeight}\r\n                  width={mWidth}\r\n                  handleCountryName={this.handleCountry}\r\n                  handleCountryOver={this.handleCountryOverMap}\r\n                  selectedCountry={this.state.countryOverBarchart}\r\n                  // overcountry={this.state.countryOver}\r\n                />\r\n              ) : mainWindow === 'countryMap' ? (\r\n                <MainCountry\r\n                  height={mHeight}\r\n                  width={mWidth}\r\n                  country={country}\r\n                  provinceName={this.handleProvince}\r\n                />\r\n              ) : mainWindow === 'provinceMap' ? (\r\n                <MainProvince\r\n                  cityName={this.handleCity}\r\n                  province={province}\r\n                  height={mHeight}\r\n                  width={mWidth}\r\n                />\r\n              ) : (\r\n\r\n                  <MainCity\r\n                    height={290}\r\n                    width={270}\r\n                    country={country}\r\n                    provinceName={this.handleProvince}\r\n                  />\r\n\r\n              )}\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col xs={2}>\r\n              <PieChart width={sWidth} height={sHeight} />\r\n            </Col>\r\n            <Col xs={10}>\r\n              <BarChart\r\n                width={cWidth}\r\n                height={cHeight}\r\n                selectedCountry={this.state.countryOverMap}\r\n                handleBarchartOver={this.handleCountryOverBarchart}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        {/* <Map2 data={this.state.worldData} />\r\n        <MunicipalityMap />\r\n        <MapBoston /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\reportWebVitals.js",[],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\map.jsx",["122","123","124","125","126"],"import React, {Component, createRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nclass Map extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.thismap = React.createRef();\r\n  }\r\n  async componentDidMount (error, info) {\r\n    //reading map data\r\n    // d3.json('data/overijssel.json')\r\n    //   .then(function (data) {\r\n    //     const map = data;\r\n    //     console.log(typeof map);\r\n    //     console.log(map);\r\n    //     return map;\r\n    //   })\r\n    //   .catch((err) => console.log(err.message));\r\n    \r\n    // // };\r\n    // // readingMapData('data/overijssel.json', function (mapp) {\r\n    // //   console.log(mapp.features);\r\n    // // });\r\n    // // readingMapData();\r\n    // // console.log(mmap.features);\r\n    // // console.log(readingMapData())\r\n    // // const mapp = readingMapData();\r\n    // // console.log(mapp.features)\r\n    const mapWidth = 600,\r\n      mapHeight = 1200;\r\n\r\n    // A function to set the projection\r\nconst map = this.props.map\r\n  }\r\n  // provinceMap();\r\n\r\n\r\n  render() {\r\n    console.log(this.props.data)\r\n    return (\r\n      <div>\r\n        <p>this is the map section</p>\r\n        <div ref={this.thismap}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\nexport default Map;\r\n\r\n//the next plan would be to add a mep of netherlands and assign it to the whole picture\r\n// const coordProjection = (\r\n//   translateX,\r\n//   translateY,\r\n//   scale = 200,\r\n//   lat = 6,\r\n//   long = 52.5\r\n// ) => {\r\n//   const myProjection = d3\r\n//     .geoMercator()\r\n//     .center([lat, long])\r\n//     .scale(scale)\r\n//     .translate([translateX, translateY]);\r\n//   return d3.geoPath().projection(myProjection);\r\n// };\r\n\r\n// const provinceMap = async (\r\n//   where = this.thismap.current,\r\n//   height,\r\n//   width,\r\n//   scale\r\n// ) => {\r\n//   console.log('this is province map');\r\n\r\n\r\n\r\n\r\n//   let mapsvg = d3\r\n//     .select(where)\r\n//     .append('svg')\r\n//     .attr('width', `${mapHeight}px`)\r\n//     .attr('height', `${mapWidth}px`)\r\n//     .style('border', '2px solid black')\r\n//     .append('g');\r\n\r\n//   let svgpath = coordProjection(mapWidth, mapHeight / 2 - 300);\r\n// //   const provincedata = async () => {\r\n\r\n// //     return await this.props.data;\r\n// //   }\r\n  \r\n\r\n//   }\r\n//  mapsvg\r\n//     .selectAll('path')\r\n//     .data(map.features)\r\n//     .enter()\r\n//     // for each d create an svgpath that uses the geoPath generator:\r\n//     .append('path')\r\n//     //   .attr('class', 'municipality')\r\n//     .attr('d', svgpath)\r\n//     .style('fill', 'white')\r\n//     .style('stroke', 'rgb(250, 200, 250)')\r\n//     .style('stroke-width', 2)\r\n    // //mouse events\r\n    // .on('mouseover', function (d, i) {\r\n    //   d3.select(this).style('fill', 'red');\r\n    // })\r\n    // .on('mouseout', function (d, i) {\r\n    //   d3.select(this).style('fill', 'white');\r\n    // })\r\n\r\n    // .on('click', function (d, i) {\r\n    //   //the layer shoud be off\r\n\r\n    //   //this remove works but not perfect, and it works good to remove all the shapes\r\n    //   // mapsvg.selectAll('path').remove();\r\n    //   mapsvg.remove();\r\n//       //this also works to change the whole color of the shape\r\n//       // mapsvg.selectAll('path').transition().style('fill', 'red');\r\n\r\n//       // .style('border', '20px solid black')\r\n//       //   .attr('width', `1000px`)\r\n//       // .attr('height', `1000px`)\r\n\r\n//       svgpath = coordProjection(50, 80, 7000);\r\n//       // const mapsvg = d3\r\n//       // .select(where)\r\n//       // .append('svg')\r\n//       // .attr('width', `${mapHeight}px`)\r\n//       // .attr('height', `${mapWidth}px`)\r\n//       // .style('border', '1px solid black')\r\n//       // .append('g');\r\n//       let mapsvg = d3\r\n//         .select(where)\r\n//         .append('svg')\r\n//         .attr('width', `200px`)\r\n//         .attr('height', `300px`)\r\n//         .style('border', '2px solid black')\r\n//         .append('g')\r\n//         .selectAll('path')\r\n//         .data(map.features)\r\n//         .enter()\r\n//         // for each d create an svgpath that uses the geoPath generator:\r\n//         .append('path')\r\n//         //   .attr('class', 'municipality')\r\n//         .attr('d', svgpath)\r\n//         .style('fill', 'white')\r\n//         .style('stroke', 'rgb(250, 200, 250)')\r\n//         .style('stroke-width', 2);\r\n\r\n//       // mapsvg.transition()\r\n//       // .duration(500).style('fill', 'white')\r\n//       //redraw the same layer in other place with the smaller scale\r\n//       // d3.select(this).scale(5000);\r\n//     });\r\n//   let mapsvg1 = d3\r\n//     .select(where)\r\n//     .append('svg')\r\n//     .attr('width', `200px`)\r\n//     .attr('height', `300px`)\r\n//     .attr('transform', `translate(0, -10)`)\r\n//     .style('border', '2px solid black')\r\n//     .append('g')\r\n//     .selectAll('path')\r\n//     .data(map.features)\r\n//     .enter()\r\n//     // for each d create an svgpath that uses the geoPath generator:\r\n//     .append('path')\r\n//     //   .attr('class', 'municipality')\r\n//     .attr('d', svgpath)\r\n//     .style('fill', 'white')\r\n//     .style('stroke', 'rgb(250, 200, 250)')\r\n//     .style('stroke-width', 2);\r\n// };\r\n\r\n// //mouse events functions\r\n// const mouseOverHandler = (d, i) => {\r\n//   console.log('mouseover');\r\n// };\r\n\r\n// const clickHandler = () => {\r\n//   //1- remove the main map\r\n//   //2- change it to the up left\r\n//   //3- draw a new small map\r\n//   //4- draom a new map for the next level, based on the selected polygone\r\n//   console.log('click');\r\n\r\n//   d3.select(this.thismap.current).selectAll('path').remove();\r\n//   // mapsvg\r\n//   //   .append('rect')\r\n//   //   .attr('width', `${20}px`)\r\n//   //   .attr('height', `${20}px`)\r\n//   //   .style('border', '1px solid black')\r\n//   //   .attr('transform', `translate(${0}, ${0})`);\r\n// };\r\n\r\n// const mouseOutHandler = () => {\r\n//   console.log('mouseout');\r\n// };\r\n\r\n// // asynchronously load geojson:\r\n// //reading data\r\n\r\n// // console.log(map.features);\r\n// const removeMap = (where) => {\r\n//   d3.select(where).selectAll('path').remove();\r\n// };\r\n// provinceMap();","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mapBoston.jsx",[],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\data\\map2.jsx",["127","128","129"],"import React, {Component, createRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nclass Map2 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.thismap = React.createRef();\r\n  }\r\n  componentDidMount(error, info) {\r\n    //reading map data\r\n    d3.json('data/geoserver.json')\r\n      .then(function (data) {\r\n        const map = data;\r\n        console.log(typeof map);\r\n        console.log(map);\r\n        return map;\r\n      })\r\n      .catch((err) => console.log(err.message));\r\n    // const data = await this.props.data;\r\n\r\n    // };\r\n    // readingMapData('data/overijssel.json', function (mapp) {\r\n    //   console.log(mapp.features);\r\n    // });\r\n    // readingMapData();\r\n    // console.log(mmap.features);\r\n    // console.log(readingMapData())\r\n    // const mapp = readingMapData();\r\n    // console.log(mapp.features)\r\n    const mapWidth = 350,\r\n      mapHeight = 400;\r\n\r\n    const provinceMap = async (\r\n      where = this.thismap.current,\r\n      height,\r\n      width,\r\n      scale\r\n    ) => {\r\n      console.log('this is province map');\r\n      const mapsvg = d3\r\n        .select(where)\r\n        .append('svg')\r\n        .attr('width', `${mapHeight}px`)\r\n        .attr('height', `${mapWidth}px`)\r\n        .style('border', '1px solid black')\r\n        .append('g');\r\n\r\n      const myProj = d3\r\n        .geoMercator()\r\n        .center([-10, 30])\r\n        .scale(60)\r\n        .translate([mapWidth / 2, mapHeight / 2]);\r\n\r\n      const svgpath = d3.geoPath().projection(myProj);\r\n      const map = await this.props.data;\r\n      mapsvg\r\n        .selectAll('path')\r\n        .data(map.features)\r\n        .enter()\r\n        // for each d create an svgpath that uses the geoPath generator:\r\n        .append('path')\r\n        //   .attr('class', 'municipality')\r\n        .attr('d', svgpath)\r\n        .style('fill', 'white')\r\n        .style('stroke', 'rgb(250, 200, 250)')\r\n        .style('stroke-width', 2)\r\n        //mouse events\r\n        .on('mouseover', mouseOverHandler)\r\n        .on('mouseout', mouseOutHandler)\r\n        .on('click', clickHandler);\r\n    };\r\n\r\n    //mouse events functions\r\n    const mouseOverHandler = (d, i) => {\r\n      console.log('mouseover');\r\n    };\r\n\r\n    const clickHandler = () => {\r\n      //1- remove the main map\r\n      //2- change it to the up left\r\n      //3- draw a new small map\r\n      //4- draom a new map for the next level, based on the selected polygone\r\n      console.log('click');\r\n\r\n      d3.select(this.thismap.current).selectAll('path').remove();\r\n      // mapsvg\r\n      //   .append('rect')\r\n      //   .attr('width', `${20}px`)\r\n      //   .attr('height', `${20}px`)\r\n      //   .style('border', '1px solid black')\r\n      //   .attr('transform', `translate(${0}, ${0})`);\r\n    };\r\n\r\n    const mouseOutHandler = () => {\r\n      console.log('mouseout');\r\n    };\r\n\r\n    // asynchronously load geojson:\r\n    //reading data\r\n\r\n    // console.log(map.features);\r\n    const removeMap = (where) => {\r\n      d3.select(where).selectAll('path').remove();\r\n    };\r\n    // provinceMap();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>this is the map2 section</p>\r\n        <div ref={this.thismap}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map2;\r\n\r\n//the next plan would be to add a mep of netherlands and assign it to the whole picture\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\box.jsx",["130","131","132"],"import React, {Component, createRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nclass Box extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  resizeObserver = null;\r\n  thismap = createRef();\r\n  state = {};\r\n  async componentDidMount(error, info) {\r\n    if ('ResizeObserver' in window) {\r\n      this.observe(ResizeObserver);\r\n    } else {\r\n      import('resize-observer-polyfill').then(this.observe);\r\n    }\r\n    async function Read() {}\r\n    const width = 400\r\n    const height = 400\r\n\r\n    const mapsvg = d3\r\n      .select(this.thismap.current)\r\n      .append('svg')\r\n      .attr('width', `${width}px`)\r\n      .attr('height', `${height}px`)\r\n      .style('border', '3px solid black')\r\n      .append('g');\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.resizeObserver) {\r\n      this.resizeObserver.disconnect();\r\n    }\r\n  }\r\n\r\n  observe = (RO) => {\r\n    this.resizeObserver = new RO((entries) => {\r\n      const {width, height, top, right, bottom, left} = entries[0].contentRect;\r\n      this.setState({width, height, top, right, bottom, left});\r\n    });\r\n\r\n    if (this.thismap.current) {\r\n      this.resizeObserver.observe(this.thismap.current);\r\n    }\r\n  };\r\n\r\n  render() {\r\n      console.log(this.state.height, this.state.width)\r\n    return (\r\n      \r\n        <div ref={this.thismap} className=\"border border-dark\">{this.mapsvg}</div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Box;\r\n\r\n//the next plan would be to add a mep of netherlands and assign it to the whole picture\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\boxfunction.jsx",["133","134"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n\r\nexport default function Boxfunction({width, height}) {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(async() => {\r\n\r\n\r\n    //removing svg\r\n    d3.select(svgRef.current).select('*').remove();\r\n    console.log(height, width)\r\n    //draw svg\r\n    const mapsvg1 = d3\r\n      .select(svgRef.current)\r\n      .append('svg')\r\n      .attr('width', `${width}px`)\r\n      .attr('height', `${width}px`)\r\n      .style('border', '2px solid black')\r\n      .append('g')\r\n\r\n      const myProj = d3\r\n      .geoMercator()\r\n      .center([6.0, 51.5])\r\n      .scale(3500)\r\n      .translate([width / 2, height / 2]);\r\n\r\n    const svgpath = d3.geoPath().projection(myProj);\r\n    //to load a file successfully it's coordinates should be transfered to wgs84 4326\r\n    const map = await d3.json('data/ov.json');\r\n    mapsvg1\r\n      .selectAll('path')\r\n      .data(map.features)\r\n      .enter()\r\n      // for each d create an svgpath that uses the geoPath generator:\r\n      .append('path')\r\n      //   .attr('class', 'municipality')\r\n      .attr('d', svgpath)\r\n      .style('fill', 'white')\r\n      .style('stroke', 'rgb(250, 200, 250)')\r\n      .style('stroke-width', 2)\r\n      \r\n  }, [height, width]);\r\n\r\n  return <div id=\"svg-chart\" ref={svgRef}></div>;\r\n}\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\boxfunction1.jsx",["135"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as turf from '@turf/turf'\r\n\r\nexport default function Boxfunction1({city, width, height}) {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    //removing svg\r\n    d3.select(svgRef.current).select('*').remove();\r\n    console.log(height, width, city);\r\n    //draw svg\r\n    const mapsvg = d3\r\n      .select(svgRef.current)\r\n      .append('svg')\r\n      .attr('width', `${width}px`)\r\n      .attr('height', `${height}px`)\r\n      .style('border', '2px solid black')\r\n      .append('g');\r\n\r\n      let mapfeatuer = {}\r\n      d3.json('data/overijssel.json').then((map) => {\r\n        for (let feature of map.features) {\r\n          // console.log(feature)\r\n          if (feature.properties.gm_naam === city) {\r\n            mapfeatuer = feature\r\n            var centroid = turf.centroid(mapfeatuer);\r\n            console.log(centroid)\r\n          }\r\n        }\r\n    const myProj = d3\r\n      .geoMercator()\r\n      .center(centroid ? centroid.geometry.coordinates : [0, 0])\r\n      .scale(15000)\r\n      .translate([width / 2, width / 2]);\r\n\r\n    const svgpath = d3.geoPath().projection(myProj);\r\n    //to load a file successfully it's coordinates should be transfered to wgs84 4326\r\n        mapsvg\r\n        .selectAll('path')\r\n        .data([mapfeatuer])\r\n        .enter()\r\n        // for each d create an svgpath that uses the geoPath generator:\r\n        .append('path')\r\n        //   .attr('class', 'municipality')\r\n        .attr('d', svgpath)\r\n        .style('fill', 'rgb(250, 200, 250)')\r\n        .style('stroke', 'rgb(250, 200, 250)')\r\n        .style('stroke-width', 2);\r\n    })\r\n    \r\n  }, [height, width, city]);\r\n\r\n  return <div id=\"svg-chart\" ref={svgRef}></div>;\r\n}\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\smallProvince.jsx",["136","137","138","139"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as turf from '@turf/turf';\r\nimport PathProjection from './tools/pathProjection';\r\n\r\nexport default function SmallProvince({handleClick, province, width, height, city}) {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const handle = () => {\r\n      handleClick();\r\n    };\r\n    //removing svg\r\n    d3.select(svgRef.current).select('*').remove();\r\n    // console.log(height, width, country);\r\n    //draw svg\r\n    const mapsvg = d3\r\n      .select(svgRef.current)\r\n      .append('svg')\r\n      .attr('width', `${width}px`)\r\n      .attr('height', `${height}px`)\r\n      // .style('border', '2px solid black')\r\n      .append('g');\r\n\r\n    //to add background color\r\n    mapsvg\r\n      .append('rect')\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('fill', 'rgb(65, 83, 83)');\r\n\r\n    var projection = d3\r\n      .geoConicConformal()\r\n      .scale(19000) // value I would like to which when the region changes\r\n      .center([4.45, 50.53]) // value I would like to which when the region changes\r\n      .translate([width / 2, height / 2]);\r\n\r\n    var svgpath = d3.geoPath().projection(projection);\r\n\r\n    d3.json(`data/${province.toLowerCase()}.geojson`).then((map) => {\r\n      projection.fitSize([height, width], map);\r\n\r\n      // const svgpath = PathProjection(turf.centroid(map).geometry.coordinates, 230,[height / 2 + 90, width / 2 - 30])\r\n\r\n      //to load a file successfully it's coordinates should be transfered to wgs84 4326\r\n      mapsvg\r\n        .selectAll('path')\r\n        .data(map.features)\r\n        .enter()\r\n        // for each d create an svgpath that uses the geoPath generator:\r\n        .append('path')\r\n        //   .attr('class', 'municipality')\r\n        .attr('d', svgpath)\r\n        .style('fill', (d, i) =>\r\n          d.properties.gm_naam === city ? 'blue' : 'rgb(60, 60, 60)'\r\n        )\r\n        .style('stroke', 'white')\r\n        .style('stroke-width', 0.5)\r\n        .on('click', function (d, i) {\r\n          console.log(i.properties.admin);\r\n          handle();\r\n        });\r\n    });\r\n  }, [height, width, city]);\r\n\r\n  return <div id=\"svg-chart\" ref={svgRef}></div>;\r\n}\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\tools\\pathProjection.jsx",[],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\MainWorld.jsx",["140","141","142","143"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as turf from '@turf/turf';\r\nimport PathProjection from './tools/pathProjection';\r\n\r\nexport default function MainWorld({\r\n  width,\r\n  height,\r\n  handleCountryName,\r\n  handleCountryOver,\r\n  selectedCountry,\r\n}) {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const handleClick = (admin, tooltip) => {\r\n      handleCountryName(admin);\r\n      handleCountryOver('');\r\n      tooltip.style('visibility', 'hidden');\r\n    };\r\n\r\n    console.log(selectedCountry);\r\n    const mouseOver = (country, tooltip) => {\r\n      handleCountryOver(country);\r\n      tooltip.style('visibility', 'visible').text(country);\r\n    };\r\n\r\n    const mouseOut = (tooltip) => {\r\n      tooltip.style('visibility', 'hidden');\r\n    };\r\n\r\n    const mouseMove = (i, country, tooltip) => {\r\n      tooltip\r\n        .style('top', i.clientY - 10 + 'px')\r\n        .style('left', i.clientX + 10 + 'px')\r\n        .text(country);\r\n    };\r\n\r\n    //removing svg\r\n    // console.log(height, width);\r\n    //draw svg\r\n    const mapsvg = d3\r\n    .select(svgRef.current)\r\n    .append('svg')\r\n    .attr('width', `${height}px`)\r\n    .attr('height', `${width}px`)\r\n    // .style('border', '2px solid black')\r\n    .append('g');\r\n    \r\n    //to add background color\r\n    mapsvg\r\n    .append('rect')\r\n    .attr('width', '100%')\r\n    .attr('height', '100%')\r\n    .attr('fill', 'rgb(65, 83, 83)');\r\n    //rgb(235, 240, 220)\r\n    let mapfeatuer = {};\r\n    selectedCountry === '' ? console.log('first') : d3.select(svgRef.current).select('*').remove();\r\n    // selectedCountry !== '' ? d3.select(svgRef.current).select('*').remove() :console.log('first')  ;\r\n    d3.json('data/europe.json').then((map) => {\r\n      const bounding_box = turf.bbox(map);\r\n      console.log(map);\r\n      const svgpath = PathProjection(\r\n        turf.centroid(map).geometry.coordinates,\r\n        700,\r\n        [height / 2 + 270, width / 2 - 50]\r\n      );\r\n\r\n      d3.select('svgRef.current')\r\n        .append('div')\r\n        .attr('id', 'tooltip')\r\n        .attr('style', 'position: absolute; opacity: 0;');\r\n\r\n      //to load a file successfully it's coordinates should be transfered to wgs84 4326\r\n      mapsvg\r\n        .selectAll('path')\r\n        .data(map.features)\r\n        .enter()\r\n        // for each d create an svgpath that uses the geoPath generator:\r\n        .append('path')\r\n        //   .attr('class', 'municipality')\r\n        .attr('d', svgpath)\r\n        // .style('fill', 'white')\r\n        .style('fill', (d, i) =>\r\n          d.properties.admin === selectedCountry ? 'blue' : 'rgb(30, 10, 10)'\r\n        )\r\n        \r\n        .style('stroke', 'white')\r\n        .style('stroke-width', 1)\r\n        .on('mouseover', function (i, d) {\r\n          d3.select(this).style('fill', 'rgb(80, 60, 60)');\r\n          mouseOver(d.properties.admin, tooltip);\r\n          //for adding the flags\r\n          mapsvg\r\n            .append('svg:image')\r\n            .attr('x', 10)\r\n            .attr('y', 10)\r\n            .attr('width', 50)\r\n            .attr('height', 50)\r\n            // .attr('xlink:href', \"data/download.jpg\");\r\n            .attr(\r\n              'xlink:href',\r\n              `https://www.countryflags.io/${d.properties.wb_a2.toLowerCase()}/shiny/64.png`\r\n            );\r\n        })\r\n        .on('mousemove', (i, d) => {\r\n          mouseMove(i, d.properties.admin, tooltip);\r\n        })\r\n        .on('mouseout', function (i, d) {\r\n          d3.select(this).style('fill', 'rgb(30, 10, 10)');\r\n          mouseOut(tooltip);\r\n        })\r\n        .on('click', function (i, d) {\r\n          // console.log(i.properties.admin);\r\n          handleClick(d.properties.admin, tooltip);\r\n        });\r\n\r\n      //define the tooltip\r\n      const tooltip = d3\r\n        .select('body')\r\n        .append('div')\r\n        .style('position', 'absolute')\r\n        .style('font-family', \"'Open Sans', sans-serif\")\r\n        .style('font-size', '15px')\r\n        .style('z-index', '10')\r\n        .style('background-color', 'white')\r\n        .style('color', 'black')\r\n        .style('border', 'solid')\r\n        .style('border-color', '#A89ED6')\r\n        .style('padding', '5px')\r\n        .style('opacity', 0.9)\r\n        .style('border-radius', '2px')\r\n        .style('visibility', 'hidden');\r\n    });\r\n  }, [height, width, selectedCountry]);\r\n\r\n  return <div id=\"svg-chart\" ref={svgRef}></div>;\r\n}\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\smallWorld.jsx",["144","145","146"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as turf from '@turf/turf';\r\nimport PathProjection from './tools/pathProjection';\r\n\r\nexport default function SmallWorld({country, width, height, handleClick}) {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const handle = () => {\r\n      handleClick();\r\n    };\r\n    //removing svg\r\n    d3.select(svgRef.current).select('*').remove();\r\n    console.log(height, width, country);\r\n    //draw svg\r\n    const mapsvg = d3\r\n      .select(svgRef.current)\r\n      .append('svg')\r\n      .attr('width', `${width}px`)\r\n      .attr('height', `${height}px`)\r\n      // .style('border', '2px solid black')\r\n      .append('g');\r\n\r\n    //to add background color\r\n    mapsvg\r\n      .append('rect')\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('fill', 'rgb(65, 83, 83)');\r\n\r\n    let mapfeatuer = {};\r\n    d3.json('data/europe.json').then((map) => {\r\n      const svgpath = PathProjection(\r\n        turf.centroid(map).geometry.coordinates,\r\n        230,\r\n        [height / 2 + 90, width / 2 - 30]\r\n      );\r\n\r\n      //to load a file successfully it's coordinates should be transfered to wgs84 4326\r\n      mapsvg\r\n        .selectAll('path')\r\n        .data(map.features)\r\n        .enter()\r\n        // for each d create an svgpath that uses the geoPath generator:\r\n        .append('path')\r\n        //   .attr('class', 'municipality')\r\n        .attr('d', svgpath)\r\n        .style('fill', (d, i) =>\r\n          d.properties.admin === country ? 'blue' : 'rgb(60, 60, 60)'\r\n        )\r\n        .style('stroke', 'white')\r\n        .style('stroke-width', 0.4)\r\n        .on('click', function (d, i) {\r\n          console.log(i.properties.admin);\r\n          handle();\r\n        });\r\n    });\r\n  }, [height, width, country]);\r\n\r\n  return <div id=\"svg-chart\" ref={svgRef}></div>;\r\n}\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mainCountry.jsx",["147","148","149","150","151"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as turf from '@turf/turf';\r\nimport PathProjection from './tools/pathProjection';\r\n\r\nexport default function MainCountry({width, height, country, provinceName}) {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n\r\n    const mouseOver = (province, tooltip) => {\r\n      // handleCountryOver(country);\r\n      console.log('tol')\r\n      tooltip.style('visibility', 'visible').text(province);\r\n    };\r\n\r\n    const mouseMove = (i, country, tooltip) => {\r\n      tooltip\r\n        .style('top', i.clientY - 10 + 'px')\r\n        .style('left', i.clientX + 10 + 'px')\r\n        .text(country);\r\n    };\r\n\r\n    const mouseOut = (tooltip) => {\r\n      tooltip.style('visibility', 'hidden');\r\n    };\r\n\r\n    const handleClick = (province, tooltip) => {\r\n      provinceName(province);\r\n      tooltip.style('visibility', 'hidden');\r\n    };\r\n\r\n    d3.select(svgRef.current).select('*').remove();\r\n    console.log(height, width);\r\n    console.log('dfdf', country);\r\n    //draw svg\r\n    const mapsvg = d3\r\n      .select(svgRef.current)\r\n      .append('svg')\r\n      .attr('width', `${height}px`)\r\n      .attr('height', `${width}px`)\r\n      // .style('border', '2px solid black')\r\n      .append('g');\r\n\r\n    //to add background color\r\n    mapsvg\r\n      .append('rect')\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('fill', 'rgb(65, 83, 83)');\r\n\r\n    var projection = d3\r\n      .geoConicConformal()\r\n      .scale(19000) // value I would like to which when the region changes\r\n      .center([4.45, 50.53]) // value I would like to which when the region changes\r\n      .translate([width / 2, height / 2]);\r\n\r\n    // var svg = d3.select( \"#mapcontainer\" )\r\n    //     .append( \"svg\" )\r\n    //     .attr(\"width\", width)\r\n    //     .attr(\"height\", height)\r\n    //     .style(\"border\", \"solid 1px black\");\r\n\r\n    var svgpath = d3.geoPath().projection(projection);\r\n\r\n    let mapfeatuer = {};\r\n    d3.json(`data/${country}.geojson`).then((map) => {\r\n      console.log(map);\r\n      projection.fitSize([height, width], map);\r\n\r\n      // const bbox_path = path.bounds(map);\r\n      // console.log(bbox_path)\r\n      // const scale = 0.95 / Math.max(\r\n      //   (bbox_path[2] - bbox_path[0]) / width,\r\n      //   (bbox_path[2] - bbox_path[1]) / height\r\n      // );\r\n\r\n      // var bbox_feature = d3.geo.bounds(map)\r\n      // const center = [\r\n      //   (bbox_feature[2] + bbox_feature[0]) / 2,\r\n      //   (bbox_feature[3] + bbox_feature[1]) / 2];\r\n      // console.log(scale)\r\n      // console.log(turf.centroid(map).geometry.coordinates)\r\n      // console.log(turf.bboxPolygon(bbox_path).geometry.coordinates[0])\r\n\r\n      // const bbox_feature = turf.bboxPolygon(bbox_path).geometry.coordinates[0]\r\n      // const center = [\r\n      //   (bbox_feature[1][0] + bbox_feature[0][0]) / 2,\r\n      //   (bbox_feature[1][1] + bbox_feature[0][1]) / 2];\r\n\r\n      //   console.log(center)\r\n\r\n      // const svgpath = PathProjection(\r\n      //   turf.center(map).geometry.coordinates,\r\n      //   2000,\r\n      //   [width / 2 + 420, height / 2 ]\r\n      // );\r\n\r\n      //to load a file successfully it's coordinates should be transfered to wgs84 4326\r\n      mapsvg\r\n        .selectAll('path')\r\n        .data(map.features)\r\n        .enter()\r\n        // for each d create an svgpath that uses the geoPath generator:\r\n        .append('path')\r\n        //   .attr('class', 'municipality')\r\n        .attr('d', svgpath)\r\n        .style('fill', 'black')\r\n        .style('stroke', 'white')\r\n        .style('fill', 'rgb(30, 10, 10)')\r\n        .style('stroke-width', 1)\r\n        .on('mouseover', function (d, i) {\r\n          d3.select(this).style('fill', 'rgb(60, 60, 60)');\r\n          mouseOver(i.properties.name, tooltip);\r\n          console.log(i.properties.name)\r\n          mapsvg\r\n            .append('svg:image')\r\n            .attr('x', 10)\r\n            .attr('y', 10)\r\n            .attr('width', 80)\r\n            .attr('height', 80)\r\n            // .attr('xlink:href', \"data/download.jpg\");\r\n            .attr('xlink:href', `data/pflags/${i.properties.name}.png`);\r\n        })\r\n        .on('mousemove', (i, d) => {\r\n          mouseMove(i, d.properties.name, tooltip);\r\n        })\r\n        .on('mouseout', function (d, i) {\r\n          d3.select(this).style('fill', 'rgb(30, 10, 10)');\r\n          mouseOut(tooltip);\r\n        })\r\n        .on('click', function (d, i) {\r\n          // console.log(i.properties.admin);\r\n          handleClick(i.properties.name, tooltip);\r\n        });\r\n\r\n        const tooltip = d3\r\n        .select('body')\r\n        .append('div')\r\n        .style('position', 'absolute')\r\n        .style('font-family', \"'Open Sans', sans-serif\")\r\n        .style('font-size', '15px')\r\n        .style('z-index', '10')\r\n        .style('background-color', 'white')\r\n        .style('color', 'black')\r\n        .style('border', 'solid')\r\n        .style('border-color', '#A89ED6')\r\n        .style('padding', '5px')\r\n        .style('opacity', 0.9)\r\n        .style('border-radius', '2px')\r\n        .style('visibility', 'hidden');\r\n    });\r\n  }, [height, width]);\r\n\r\n  return <div id=\"svg-chart\" ref={svgRef}></div>;\r\n}\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mainProvince.jsx",["152","153","154","155"],"import React, {Component, createRef} from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as turf from '@turf/turf';\r\n\r\nclass MainProvince extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // this.mouseOver = this.MouseOver.bind(this);\r\n  }\r\n  resizeObserver = null;\r\n  thismap = createRef();\r\n  state = {cit: ''};\r\n  async componentDidMount(error, info) {\r\n    \r\n    const mouseOver = (city, tooltip) => {\r\n      console.log('tol');\r\n      tooltip.style('visibility', 'visible').text(city);\r\n    };\r\n\r\n    const mouseMove = (i, city, tooltip) => {\r\n      tooltip\r\n        .style('top', i.clientY - 10 + 'px')\r\n        .style('left', i.clientX + 10 + 'px')\r\n        .text(city);\r\n    };\r\n\r\n    const mouseOut = (tooltip) => {\r\n      tooltip.style('visibility', 'hidden');\r\n    };\r\n\r\n    const handleClick = (city, tooltip) => {\r\n      // provinceName(province);\r\n      tooltip.style('visibility', 'hidden');\r\n      this.props.cityName(city);\r\n    };\r\n\r\n    const handle = (name) => {\r\n      console.log(name);\r\n    };\r\n\r\n    if ('ResizeObserver' in window) {\r\n      this.observe(ResizeObserver);\r\n    } else {\r\n      import('resize-observer-polyfill').then(this.observe);\r\n    }\r\n    // };\r\n    // readingMapData('data/overijssel.json', function (mapp) {\r\n    //   console.log(mapp.features);\r\n    // });\r\n    // readingMapData();\r\n    // console.log(mmap.features);\r\n    // console.log(readingMapData())\r\n    // const mapp = readingMapData();\r\n    // console.log(mapp.features)\r\n\r\n    const width = this.props.width;\r\n    const height = this.props.height;\r\n\r\n    // const provinceMap = async (\r\n    //   where = this.thismap.current,\r\n    //   height = mapHeight,\r\n    //   width = mapWidth\r\n    // ) => {\r\n    //   console.log('this is province map');\r\n    const mapsvg = d3\r\n      .select(this.thismap.current)\r\n      .append('svg')\r\n      .attr('width', `${height}px`)\r\n      .attr('height', `${width}px`)\r\n      // .style('border', '2px solid black')\r\n      .append('g');\r\n\r\n    //to add background color\r\n    mapsvg\r\n      .append('rect')\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('fill', 'rgb(65, 83, 83)');\r\n\r\n    var projection = d3\r\n      .geoConicConformal()\r\n      .scale(19000) // value I would like to which when the region changes\r\n      .center([4.45, 50.53]) // value I would like to which when the region changes\r\n      .translate([width / 2, height / 2]);\r\n\r\n    var svgpath = d3.geoPath().projection(projection);\r\n\r\n    const map = await d3.json('data/overijssel.json');\r\n    projection.fitSize([height, width], map);\r\n\r\n    const data = [\r\n      {a: 'b', c: 1},\r\n      {a: 'b', c: 1},\r\n      {a: 'b', c: 1},\r\n      {a: 'b', c: 1},\r\n    ];\r\n\r\n    // const x = d3.scaleBand()\r\n    // .domain(data.map(d => d.a))\r\n    // .range([10, width - 10])\r\n    // .padding(0.1)\r\n\r\n    // console.log(x)\r\n\r\n    mapsvg\r\n      .selectAll('path')\r\n      .data(map.features)\r\n      .enter()\r\n      // for each d create an svgpath that uses the geoPath generator:\r\n      .append('path')\r\n      //   .attr('class', 'municipality')\r\n      .attr('d', svgpath)\r\n      .style('fill', 'rgb(30, 10, 10)')\r\n      .style('stroke', 'white')\r\n      .style('stroke-width', 1)\r\n      //mouse events\r\n      .on('mouseover', function (d, i) {\r\n        d3.select(this).style('fill', 'rgb(60, 60, 60)');\r\n        console.log(i.properties.gm_naam);\r\n        mouseOver(i.properties.gm_naam, tooltip);\r\n        // console.log(x('Russia'))\r\n      })\r\n      .on('mousemove', (i, d) => {\r\n        mouseMove(i, d.properties.gm_naam, tooltip);\r\n      })\r\n      .on('mouseout', function (d, i) {\r\n        d3.select(this).style('fill', 'rgb(30, 10, 10)');\r\n        mouseOut(tooltip);\r\n      })\r\n      .on('click', function (d, i) {\r\n        handleClick(i.properties.gm_naam, tooltip);\r\n      });\r\n\r\n    const tooltip = d3\r\n      .select('body')\r\n      .append('div')\r\n      .style('position', 'absolute')\r\n      .style('font-family', \"'Open Sans', sans-serif\")\r\n      .style('font-size', '15px')\r\n      .style('z-index', '10')\r\n      .style('background-color', 'white')\r\n      .style('color', 'black')\r\n      .style('border', 'solid')\r\n      .style('border-color', '#A89ED6')\r\n      .style('padding', '5px')\r\n      .style('opacity', 0.9)\r\n      .style('border-radius', '2px')\r\n      .style('visibility', 'hidden');\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.resizeObserver) {\r\n      this.resizeObserver.disconnect();\r\n    }\r\n  }\r\n\r\n  observe = (RO) => {\r\n    this.resizeObserver = new RO((entries) => {\r\n      const {width, height, top, right, bottom, left} = entries[0].contentRect;\r\n      this.setState({width, height, top, right, bottom, left});\r\n    });\r\n\r\n    if (this.thismap.current) {\r\n      this.resizeObserver.observe(this.thismap.current);\r\n    }\r\n  };\r\n\r\n  // handleMouseOver = (name, tool) => {\r\n  //   this.mouseOver(name, tool);\r\n  // };\r\n\r\n  // handleclick = (name) => {\r\n  //   this.props.cityName(name);\r\n  // };\r\n\r\n  // handle = (name) => {\r\n  //   console.log(name);\r\n    \r\n  // };\r\n  render() {\r\n    return <div ref={this.thismap}></div>;\r\n  }\r\n}\r\n\r\nexport default MainProvince;\r\n\r\n//the next plan would be to add a mep of netherlands and assign it to the whole picture\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\smallCountry.jsx",["156","157","158","159"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as turf from '@turf/turf';\r\nimport PathProjection from './tools/pathProjection';\r\n\r\nexport default function SmallCountry({\r\n  country,\r\n  province,\r\n  width,\r\n  height,\r\n  handleClick,\r\n}) {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const handle = () => {\r\n      handleClick();\r\n    };\r\n    //removing svg\r\n    d3.select(svgRef.current).select('*').remove();\r\n    console.log(height, width, country);\r\n    //draw svg\r\n    const mapsvg = d3\r\n      .select(svgRef.current)\r\n      .append('svg')\r\n      .attr('width', `${width}px`)\r\n      .attr('height', `${height}px`)\r\n      // .style('border', '2px solid black')\r\n      .append('g');\r\n\r\n    //to add background color\r\n    mapsvg\r\n      .append('rect')\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('fill', 'rgb(65, 83, 83)');\r\n\r\n    var projection = d3\r\n      .geoConicConformal()\r\n      .scale(19000) // value I would like to which when the region changes\r\n      .center([4.45, 50.53]) // value I would like to which when the region changes\r\n      .translate([width / 2, height / 2]);\r\n\r\n    var svgpath = d3.geoPath().projection(projection);\r\n\r\n    d3.json(`data/${country}.geojson`).then((map) => {\r\n      projection.fitSize([height, width], map);\r\n\r\n      // const svgpath = PathProjection(turf.centroid(map).geometry.coordinates, 230,[height / 2 + 90, width / 2 - 30])\r\n\r\n      //to load a file successfully it's coordinates should be transfered to wgs84 4326\r\n      mapsvg\r\n        .selectAll('path')\r\n        .data(map.features)\r\n        .enter()\r\n        // for each d create an svgpath that uses the geoPath generator:\r\n        .append('path')\r\n        //   .attr('class', 'municipality')\r\n        .attr('d', svgpath)\r\n        .style('fill', (d, i) =>\r\n          d.properties.name === province ? 'blue' : 'rgb(60, 60, 60)'\r\n        )\r\n        .style('stroke', 'white')\r\n        .style('stroke-width', 0.5)\r\n        .on('click', function (d, i) {\r\n          console.log(i.properties.admin);\r\n          handle();\r\n        });\r\n    });\r\n  }, [height, width, country]);\r\n\r\n  return <div id=\"svg-chart\" ref={svgRef}></div>;\r\n}\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\barChart.jsx",["160","161","162"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nexport default function BarChart({width, height, selectedCountry, handleBarchartOver}) {\r\n  const svgRef = useRef();\r\n  const margin = {left: 15, right: 15, bottom: 45, top: 15};\r\n\r\n  //to update barchart\r\n  \r\n  useEffect(() => {\r\n\r\n    const mouseOver = (i, country, tooltip) => {\r\n      tooltip.style('visibility', 'visible').text();\r\n      handleBarchartOver(country)\r\n    }\r\n    //to read the data\r\n    d3.json('data/europe.json').then((data) => {\r\n      d3.select(svgRef.current).select('*').remove();\r\n    //creating the range for the x values\r\n    const x = d3\r\n    .scaleBand()\r\n    .domain(data.features.map((d) => d.properties.abbrev))\r\n    .range([margin.left+45, width - margin.right + 10])\r\n    .padding(0.1);\r\n    \r\n    //creating the range for the y values\r\n    const y = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.max(data.features, (d) => d.properties.pop_est)])\r\n    .nice()\r\n    .range([height - margin.bottom, margin.top]);\r\n    \r\n    //creating the main svg element\r\n    const svg = d3\r\n    .select(svgRef.current)\r\n    .append('svg')\r\n    .attr('viewBox', [0, 0, width, height])\r\n    .style('background-color', 'rgb(242,242,242)');\r\n\r\n    svg.append(\"text\")\r\n        .attr(\"x\", (width / 2))             \r\n        .attr(\"y\", 15 )\r\n        .attr(\"text-anchor\", \"middle\")  \r\n        .style(\"font-size\", \"16px\") \r\n        .style(\"text-decoration\", \"underline\")  \r\n        .text(\"Population\");\r\n    \r\n    //call tooltip\r\n    // tooltip;\r\n    \r\n      //creating barchart elements\r\n      const bar = svg\r\n        .append('g')\r\n        .attr('fill', 'steelblue')\r\n        .selectAll('rect')\r\n        .data(data.features)\r\n        .enter()\r\n        .append('rect')\r\n        .style('mix-blend-mode', 'multiply')\r\n        .attr('x', (d) => x(d.properties.abbrev))\r\n        .attr('y', (d) => y(d.properties.pop_est))\r\n        .attr('height', (d) => y(0) - y(d.properties.pop_est))\r\n        .attr('width', x.bandwidth())\r\n        .attr('fill', (d) => d.properties.admin === selectedCountry? 'red': 'blue')\r\n        // .attr('fill', (d,i) => d.properties.admin === selectedCountry? '#FDE5BD': 'white')\r\n        .text((d) => d)\r\n        .on('mouseover', function (i, d) {\r\n          \r\n          d3.select(this).attr('fill', '#FDE5BD');\r\n          mouseOver(i, d.properties.admin, tooltip)\r\n        })\r\n        .on('mousemove', (i, d) => {\r\n          console.log(d)\r\n          tooltip\r\n            .style('top', i.clientY - 10 + 'px')\r\n            .style('left', i.clientX + 10 + 'px')\r\n            .html(d.properties.admin + \"<br>\" + d.properties.pop_est);\r\n        })\r\n        .on('mouseout', function (i, d) {\r\n          tooltip.style('visibility', 'hidden');\r\n          d3.select(this).attr('fill', 'steelblue');\r\n        });\r\n      \r\n\r\n      //xaxis element of the barchart\r\n      const xAxis = (g) =>\r\n        g\r\n          .attr('transform', `translate(0,${height - margin.bottom })`)\r\n          .call(d3.axisBottom(x).tickSizeOuter(0));\r\n\r\n      svg\r\n        .append('g')\r\n        .attr('class', 'x axis')\r\n        .attr('transform', 'translate(0,' + height + ')')\r\n        .call(xAxis)\r\n        // .call(yAxis)\r\n        .selectAll('text')\r\n        .attr('y', 0)\r\n        .attr('x', 9)\r\n        .attr('dy', '.35em')\r\n        .attr('transform', 'rotate(90)')\r\n        .style('text-anchor', 'start');\r\n\r\n      //yaxis element of the barchart\r\n      const yAxis = (g) =>\r\n        g\r\n          .attr('transform', `translate(60,0)`)\r\n          .call(d3.axisRight(y))\r\n\r\n          svg\r\n          .append('g')\r\n          .attr('class', 'y axis')\r\n          // .attr('transform', `translate(${margin.left+50},0)`)\r\n          .call(yAxis)\r\n          // .call(yAxis)\r\n          .selectAll('text')\r\n          .attr('y', 0)\r\n          .attr('x', -59)\r\n          .attr('dy', '.35em')\r\n          // .attr('transform', 'rotate(90)')\r\n          .style('text-anchor', 'start');\r\n\r\n    //       .call((g) => g.select('.domain').remove());\r\n\r\n\r\n\r\n    //  svg\r\n    //     .append('g')\r\n    //     .call(yAxis)\r\n    //     .selectAll('text')\r\n    //     .attr('y', 0)\r\n    //     .attr('x', -30)\r\n    //     .attr('dy', '.35em')\r\n    //     .style('text-anchor', 'start');\r\n\r\n      //to define the tooltip\r\n      const tooltip = d3\r\n        .select('body')\r\n        .append('div')\r\n        .style('position', 'absolute')\r\n        .style('font-family', \"'Open Sans', sans-serif\")\r\n        .style('font-size', '15px')\r\n        .style('z-index', '10')\r\n        .style('background-color', 'rgb(0,0,0)')\r\n        .style('color', 'rgb(255,250,250')\r\n        .style('border', 'solid')\r\n        .style('border-color', 'rgb(255,255,255')\r\n        .style('padding', '5px')\r\n        .style('border-radius', '2px')\r\n        .style('visibility', 'hidden');\r\n    });\r\n  }, [height, width, selectedCountry]);\r\n\r\n  return <div id=\"svg-chart\" ref={svgRef}></div>;\r\n}\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\pieChart.jsx",["163","164","165","166"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\nimport {color} from 'd3';\r\n// import useResizeObserver from 'use-resize-observer';\r\n\r\nexport default function Piechart({width, height, dat}) {\r\n  //   const [data, setData] = useState([7,8, 80, 9, 12, 13, 10, 11, 12]);\r\n  //   const [wid, setWid] = React.useState(width);\r\n  //   setWid = () => {\r\n  //     wid = this.props.width;\r\n  //   };\r\n  const svgRef = useRef();\r\n  //\r\n  //a function for identifying the type of dataset\r\n  //   const incomeExport = (object) => {\r\n  //     console.log(data[0]);\r\n  //     for (const key in data[0]) {\r\n  //       if (key === 'reward') return 'reward';\r\n  //       else if (key === 'expenditure') return 'expenditure';\r\n  //       else if (key === 'title') return 'title';\r\n  //     }\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    //   const {data} = this.props\r\n    // const IncomeOrExpense = incomeExport(data[0]);\r\n    const datab = [\r\n      {label: 'Assamese', count: 13},\r\n      {label: 'Bengali', count: 83},\r\n      {label: 'Bodo', count: 1.4},\r\n      {label: 'Dogri', count: 2.3},\r\n      {label: 'Gujarati', count: 46},\r\n      {label: 'Hindi', count: 300},\r\n      {label: 'Kannada', count: 38},\r\n      {label: 'Kashmiri', count: 5.5},\r\n      {label: 'Konkani', count: 5},\r\n      {label: 'Maithili', count: 20},\r\n      {label: 'Malayalam', count: 33},\r\n      {label: 'Manipuri', count: 1.5},\r\n      {label: 'Marathi', count: 72},\r\n      {label: 'Nepali', count: 2.9},\r\n      {label: 'Oriya', count: 33},\r\n      {label: 'Punjabi', count: 29},\r\n      {label: 'Sanskrit', count: 0.01},\r\n      {label: 'Santhali', count: 6.5},\r\n      {label: 'Sindhi', count: 2.5},\r\n      {label: 'Tamil', count: 61},\r\n      {label: 'Telugu', count: 74},\r\n      {label: 'Urdu', count: 52},\r\n    ];\r\n\r\n    const dataa = [\r\n      {label: 'Assamese', count: 13},\r\n      {label: 'Bengali', count: 83},\r\n      {label: 'Bodo', count: 1.4},\r\n      {label: 'Dogri', count: 2.3},\r\n      {label: 'Gujarati', count: 46},\r\n      {label: 'Hindi', count: 300},\r\n      {label: 'Kannada', count: 38},\r\n      {label: 'Kashmiri', count: 5.5},\r\n\r\n    ];\r\n\r\n    const radius = 50;\r\n\r\n    // svg.append('g').attr('class', 'slices');\r\n    // svg.append('g').attr('class', 'labels');\r\n    // svg.append('g').attr('class', 'lines');\r\n\r\n    // define color scale\r\n    const color = d3.scaleOrdinal(d3.schemeAccent);\r\n    // const {width} = this.props;\r\n    // const colorScale = d3\r\n    //   .scaleSequential()\r\n    //   .interpolator(d3.interpolateCool)\r\n    //   .domain([5, data.length]);\r\n\r\n    //removing svg\r\n    // d3.select(svgRef.current).select('*').remove();\r\n\r\n    //draw svg\r\n    const svg = d3\r\n      .select(svgRef.current)\r\n      .append('svg')\r\n      .attr('width', `${height}px`)\r\n      .attr('height', `${width}px`)\r\n      .style('border', '10px solid white')\r\n      .append('g')\r\n      .attr('transform', `translate(${width / 2}, ${width / 2})`);\r\n\r\n    //arc  generator, one of the generators\r\n    let arcGenerator = d3.arc().innerRadius(0).outerRadius(radius);\r\n\r\n    // pie generator\r\n    const pieGenerator = d3\r\n      .pie()\r\n      .padAngle(0)\r\n      .value((d) => {\r\n        console.log(d.count)\r\n        return d.count\r\n      })\r\n      .sort(null);\r\n\r\n    //get information from data\r\n    dataa.forEach(function (d) {\r\n      d.count = +d.count; // calculate count as we iterate through the data\r\n      d.enabled = true; // add enabled property to track which entries are checked\r\n      console.log(d.count)\r\n    });\r\n    console.log(dataa)\r\n    // creating the chart\r\n    var pathh = svg\r\n      .selectAll('path') // select all path elements inside the svg. specifically the 'g' element. they don't exist yet but they will be created below\r\n      .data(pieGenerator(dataa)) //associate dataset wit he path elements we're about to create. must pass through the pie function. it magically knows how to extract values and bakes it into the pie\r\n      .enter() //creates placeholder nodes for each of the values\r\n      .append('path') // replace placeholders with path elements\r\n      .attr('d', arcGenerator)\r\n     \r\n      .on(\"mouseover\", function(d) {\r\n        console.log(d)\r\n        arcGenerator = d3.arc().innerRadius(0).outerRadius(radius+10);\r\n        d3.select(this)\r\n        .transition()\r\n        // .merge(pathh)\r\n        .duration(500)\r\n        .attr('d', arcGenerator)\r\n      })\r\n      .on(\"mouseout\", function(d) {\r\n        console.log(d)\r\n        arcGenerator = d3.arc().innerRadius(0).outerRadius(radius);\r\n        d3.select(this)\r\n        .transition()\r\n        // .merge(pathh)\r\n        .duration(500)\r\n        .attr('d', arcGenerator)\r\n      })\r\n       // define d attribute with arc function above\r\n      .attr('fill', function (d) {\r\n        return color(d.data.label);\r\n      })\r\n      ; // use color scale to define fill of each label in dataset\r\n    // .each(function (d) {\r\n    //   this._current - d;\r\n    // }); // creates a smooth animation for each track\r\n\r\n    // mouse event handlers are attached to path so they need to come after its definition\r\n    // path.on('mouseover', function(d) {  // when mouse enters div\r\n    // var total = d3.sum(dataset.map(function(d) { // calculate the total number of tickets in the dataset\r\n    // return (d.enabled) ? d.count : 0; // checking to see if the entry is enabled. if it isn't, we return 0 and cause other percentages to increase\r\n    // }));\r\n    //add the new svg\r\n    // const arc = svg.selectAll().data(pieGenerator(data)).enter();\r\n\r\n    // // Append sectors\r\n    // arc\r\n    //   .append('path')\r\n    //   .attr('d', arcGenerator)\r\n    //   .style('fill', (_, i) => colorScale(i))\r\n    //   .style('stroke', 'white')\r\n    //   .style('stroke-width', 2);\r\n\r\n    //append text\r\n    // arc\r\n    //   .append('text')\r\n    //   .attr('text-anchor', 'middle')\r\n    //   .attr('alignment-baseline', 'middle')\r\n    //   .text((d, i) => i + 1)\r\n    //   .style('fill', '#ffffff')\r\n    //   .attr('transform', (d) => {\r\n    //     const [x, y] = arcGenerator.centroid(d);\r\n    //     return `translate(${x}, ${y})`;\r\n    //   });\r\n    // arc.exit().remove()\r\n    // arc.transition().duration(500)\r\n    //the last piece is actually about the re-rendering conditions\r\n  }, [width, height]);\r\n\r\n  return <div id=\"svg-chart\" ref={svgRef}></div>;\r\n}\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mainCity.jsx",["167","168","169","170","171","172","173"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\nimport * as d3 from 'd3';\r\nimport * as turf from '@turf/turf';\r\nimport PathProjection from './tools/pathProjection';\r\nimport CityChart from '../component/cityChart';\r\nimport CityBarChart from '../component/cityBarChart';\r\n\r\nexport default function MainCity({width, height, country, provinceName}) {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const mouseOver = (province, tooltip) => {\r\n      // handleCountryOver(country);\r\n      console.log('tol');\r\n      tooltip.style('visibility', 'visible').text(province);\r\n    };\r\n\r\n    const mouseMove = (i, country, tooltip) => {\r\n      tooltip\r\n        .style('top', i.clientY - 10 + 'px')\r\n        .style('left', i.clientX + 10 + 'px')\r\n        .text(country);\r\n    };\r\n\r\n    const mouseOut = (tooltip) => {\r\n      tooltip.style('visibility', 'hidden');\r\n    };\r\n\r\n    const handleClick = (province, tooltip) => {\r\n      provinceName(province);\r\n      tooltip.style('visibility', 'hidden');\r\n    };\r\n\r\n    d3.select(svgRef.current).select('*').remove();\r\n    console.log(height, width);\r\n    console.log('dfdf', country);\r\n    //draw svg\r\n    const mapsvg = d3\r\n      .select(svgRef.current)\r\n      .append('svg')\r\n      .attr('width', `${height}px`)\r\n      .attr('height', `${width}px`)\r\n      // .style('border', '2px solid black')\r\n      .append('g');\r\n\r\n    //to add background color\r\n    mapsvg\r\n      .append('rect')\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('fill', 'rgb(65, 83, 83)');\r\n\r\n    var projection = d3\r\n      .geoConicConformal()\r\n      .scale(19000) // value I would like to which when the region changes\r\n      .center([4.45, 50.53]) // value I would like to which when the region changes\r\n      .translate([width / 2, height / 2]);\r\n\r\n    // var svg = d3.select( \"#mapcontainer\" )\r\n    //     .append( \"svg\" )\r\n    //     .attr(\"width\", width)\r\n    //     .attr(\"height\", height)\r\n    //     .style(\"border\", \"solid 1px black\");\r\n\r\n    var svgpath = d3.geoPath().projection(projection);\r\n\r\n    let mapfeatuer = {};\r\n    d3.json(`data/Enschede.geojson`).then((map) => {\r\n      console.log(map);\r\n      projection.fitSize([height, width], map);\r\n\r\n      //to load a file successfully it's coordinates should be transfered to wgs84 4326\r\n      mapsvg\r\n        .selectAll('path')\r\n        .data(map.features)\r\n        .enter()\r\n        // for each d create an svgpath that uses the geoPath generator:\r\n        .append('path')\r\n        //   .attr('class', 'municipality')\r\n        .attr('d', svgpath)\r\n        .style('fill', 'black')\r\n        .style('stroke', 'white')\r\n        .style('fill', 'rgb(30, 10, 10)')\r\n        .style('stroke-width', 1)\r\n        .on('mouseover', function (d, i) {\r\n          d3.select(this).style('fill', 'rgb(60, 60, 60)');\r\n          mouseOver(i.properties.BU_NAAM, tooltip);\r\n          console.log(i);\r\n        })\r\n        .on('mousemove', (i, d) => {\r\n          mouseMove(i, d.properties.BU_NAAM, tooltip);\r\n        })\r\n        .on('mouseout', function (d, i) {\r\n          d3.select(this).style('fill', 'rgb(30, 10, 10)');\r\n          mouseOut(tooltip);\r\n        })\r\n        .on('click', function (d, i) {\r\n          // console.log(i.properties.admin);\r\n          //   handleClick(i.properties.BU_NAAM, tooltip);\r\n        });\r\n\r\n      const tooltip = d3\r\n        .select('body')\r\n        .append('div')\r\n        .style('position', 'absolute')\r\n        .style('font-family', \"'Open Sans', sans-serif\")\r\n        .style('font-size', '15px')\r\n        .style('z-index', '10')\r\n        .style('background-color', 'white')\r\n        .style('color', 'black')\r\n        .style('border', 'solid')\r\n        .style('border-color', '#A89ED6')\r\n        .style('padding', '5px')\r\n        .style('opacity', 0.9)\r\n        .style('border-radius', '2px')\r\n        .style('visibility', 'hidden');\r\n    });\r\n  }, [height, width]);\r\n\r\n  return (\r\n    <Row>\r\n      <Col xs={12}>\r\n        <div id=\"svg-chart\" ref={svgRef}></div>\r\n      </Col>\r\n      <Row>\r\n        <Col xs={6}>\r\n          <CityChart />\r\n        </Col>\r\n        <Col xs={6}>\r\n          <CityBarChart />\r\n        </Col>\r\n      </Row>\r\n    </Row>\r\n  );\r\n}\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\cityChart.jsx",["174","175","176","177","178","179","180","181","182","183","184"],"import React from 'react';\r\nimport {useEffect} from 'react';\r\nimport {Component, createRef, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst CityChart = () => {\r\n  const svgRef = useRef();\r\n\r\n  let chartType = '';\r\n\r\n  function changeBtn(Event) {\r\n    // console.log(Event);\r\n    if (Event.target.value == 'PIE') {\r\n      console.log(2323);\r\n      chartType = 'pie';\r\n    } else if (Event.target.value == 'BAR') {\r\n      chartType = 'bar';\r\n    }\r\n  }\r\n  // console.log(sc)\r\n  useEffect(() => {\r\n    function SproutChart(target, options) {\r\n      'use strict';\r\n      var sc = this;\r\n      console.log(chartType);\r\n\r\n      options = Array.isArray(options)\r\n        ? {\r\n            data: options,\r\n          }\r\n        : options || {};\r\n\r\n      sc.data = options.data || [\r\n        {name: 'Kevin', value: 8},\r\n        {name: 'Bob', value: 8},\r\n        {name: 'Stuart', value: 3},\r\n        {name: 'Gru', value: 5},\r\n      ];\r\n      sc.size = options.size || 250; // svg container size, idealy equals to twice of rHover + max(spaceHover, spaceActive)\r\n      sc.duration = options.duration || 1000; // transition duration of the first time draw the pie chart\r\n      sc.easing = options.easing || 'cubic-in-out'; // transition easing function, same as d3 easing\r\n      sc.materialColor = [\r\n        '#f44336',\r\n        ' #e91e63',\r\n        '#9c27b0',\r\n        '#673ab7',\r\n        '#3f51b5',\r\n        '#2196f3',\r\n        '#03a9f4',\r\n        '#00bcd4',\r\n        '#009688',\r\n        '#4caf50',\r\n        '#8bc34a',\r\n        '#cddc39',\r\n        '#ffeb3b',\r\n        '#ffc107',\r\n        '#ff9800',\r\n        '#ff5722',\r\n        '#795548',\r\n        '#9e9e9e',\r\n        '#607d8b',\r\n      ];\r\n      //this part actually each time creates a new array of colors randomly from the original array\r\n      var ri = Math.floor(Math.random() * sc.materialColor.length);\r\n      sc.materialColor = sc.materialColor\r\n        .slice(ri)\r\n        .concat(sc.materialColor.slice(0, ri));\r\n\r\n      // create the svg container\r\n      sc.svg = d3\r\n        .select(target)\r\n        .append('svg')\r\n        .attr('width', this.size)\r\n        .attr('height', this.size);\r\n\r\n      console.log(sc);\r\n      console.log(sc.svg);\r\n\r\n      return sc;\r\n    }\r\n    // console.log(SproutChart)\r\n    //the rest\r\n    SproutChart.prototype.pieChart = function (options) {\r\n      var sc = this;\r\n      sc.type = 'pie';\r\n\r\n      options = options || {};\r\n\r\n      var r = options.r || 150, // radius of pie chart\r\n        innerRadius = options.innerRadius || 80, // the radius of the donut pie inner space\r\n        rHover = options.rHover || 160, // radius of pie chart when hover\r\n        spaceHover = options.spaceHover || 10, // the space pie pop out when hover\r\n        spaceActive = options.spaceActive || 20, // the space pie pop out when active\r\n        showOnStart =\r\n          options.showOnStart !== undefined ? options.showOnStart : true; // call transitionForward() on start\r\n\r\n      //   function to draw arc\r\n      var drawArc = function (startAngle, endAngle, outerRadius) {\r\n        return d3\r\n          .arc()\r\n          .startAngle(startAngle)\r\n          .endAngle(endAngle)\r\n          .innerRadius(innerRadius)\r\n          .outerRadius(outerRadius || r);\r\n      };\r\n      //   map data to arc function\r\n      var sum = sc.data\r\n        .map(function (d) {\r\n          return d.value;\r\n        })\r\n        .reduce(function (prev, cur) {\r\n          return prev + cur;\r\n        });\r\n\r\n      var accumulate = 0;\r\n      sc.data = sc.data.map(function (d, i) {\r\n        return {\r\n          name: d.name,\r\n          value: d.value,\r\n          color: d.color || sc.materialColor[i],\r\n          arc: drawArc(\r\n            accumulate,\r\n            (accumulate += (d.value / sum) * 2 * Math.PI)\r\n          ),\r\n        };\r\n      });\r\n\r\n      var g = sc.svg\r\n        .append('g')\r\n        .attr(\r\n          'transform',\r\n          'translate(' + sc.size / 2 + ', ' + sc.size / 2 + ')'\r\n        );\r\n\r\n      //get information from data\r\n      sc.data.forEach(function (d) {\r\n        d.value = +d.value; // calculate count as we iterate through the data\r\n        d.enabled = true; // add enabled property to track which entries are checked\r\n      });\r\n\r\n      // draw for each pie\r\n      var pie = g\r\n        .selectAll('path')\r\n        .data(sc.data)\r\n        .enter()\r\n        .append('path')\r\n        .attr('d', function (d) {\r\n          return drawArc(d.arc.startAngle()(), d.arc.endAngle()())();\r\n        })\r\n        .style('fill', function (d) {\r\n          return d.color;\r\n        })\r\n\r\n        .style('clip-path', 'url(#clipMask)');\r\n\r\n      //mouse activity, mouse over\r\n      pie.on('mouseover', function (i, d) {\r\n        if (!d.active) {\r\n          //to elaborate the pie section\r\n          tooltip.style('visibility', 'visible').text();\r\n\r\n          d3.select(this)\r\n            .transition()\r\n            .duration(200)\r\n            .ease(d3.easeCubicOut)\r\n            .attr('d', function (d) {\r\n              return drawArc(\r\n                d.arc.startAngle()(),\r\n                d.arc.endAngle()(),\r\n                r + 20\r\n              )();\r\n            })\r\n            .attr('transform', function (d) {\r\n              var distance = Math.sqrt(\r\n                Math.pow(d.arc.centroid()[0], 2) +\r\n                  Math.pow(d.arc.centroid()[1], 2)\r\n              );\r\n              var n = spaceHover / distance;\r\n              return (\r\n                'translate(' +\r\n                n * d.arc.centroid()[0] +\r\n                ',' +\r\n                n * d.arc.centroid()[1] +\r\n                ')'\r\n              );\r\n            });\r\n\r\n          //to show the percentage number\r\n          g.select('text.percent')\r\n            .transition()\r\n            .duration(500)\r\n            .ease(d3.easeCubicOut)\r\n            .attr('opacity', 1)\r\n            .tween('text', function () {\r\n              console.log(d);\r\n              var j = d3.interpolate(\r\n                0,\r\n                Math.round(\r\n                  ((d.arc.endAngle()() - d.arc.startAngle()()) / 2 / Math.PI) *\r\n                    100\r\n                )\r\n              );\r\n              return function (t) {\r\n                // console.log(t)\r\n                this.textContent = Math.round(j(t)) + '%';\r\n              };\r\n            })\r\n            .style('fill', 'rgb(255,255,255)');\r\n        }\r\n      });\r\n\r\n      //mouse activity, click\r\n      pie.on('click', function (i, d) {\r\n        if (!d.active) {\r\n          d3.select(this)\r\n            .transition()\r\n            .duration(200)\r\n            .ease(d3.easeBounce)\r\n            .attr('d', function () {\r\n              return drawArc(\r\n                d.arc.startAngle()(),\r\n                d.arc.endAngle()(),\r\n                r + 40\r\n              )();\r\n            })\r\n            .attr('transform', function (d) {\r\n              var distance = Math.sqrt(\r\n                Math.pow(d.arc.centroid()[0], 2) +\r\n                  Math.pow(d.arc.centroid()[1], 2)\r\n              );\r\n              var n = spaceActive / distance;\r\n              return (\r\n                'translate(' +\r\n                n * d.arc.centroid()[0] +\r\n                ',' +\r\n                n * d.arc.centroid()[1] +\r\n                ')'\r\n              );\r\n            });\r\n        }\r\n        d.active = !d.active;\r\n      });\r\n\r\n      //mouse movement, mouse move\r\n      pie.on('mousemove', function (i, d) {\r\n        // console.log(i)\r\n        tooltip\r\n          .style('top', i.clientY - 10 + 'px')\r\n          .style('left', i.clientX + 10 + 'px')\r\n          .text(d.name);\r\n      });\r\n\r\n      //mouse movement, mouse out\r\n      pie.on('mouseout', function (i, d) {\r\n        //to finish the tooltip\r\n        tooltip.style('visibility', 'hidden');\r\n\r\n        if (!d.active) {\r\n          d3.select(this)\r\n            .transition()\r\n            .duration(200)\r\n            .ease(d3.easeCubicOut)\r\n            .attr('d', function () {\r\n              return drawArc(d.arc.startAngle()(), d.arc.endAngle()())();\r\n            })\r\n            .attr('transform', 'translate(0, 0)');\r\n\r\n          g.select('text.percent')\r\n            .transition()\r\n            .duration(500)\r\n            .ease(d3.easeCubicOut)\r\n            .attr('opacity', 0);\r\n        }\r\n        //maybe I can erase these two lines\r\n        g.select('rect').style('display', 'none');\r\n        g.select('text').text('');\r\n      });\r\n\r\n      // start transition animation clip path\r\n      var clipPath1 = g\r\n        .append('defs')\r\n        .append('clipPath1')\r\n        .attr('id', 'clipMask')\r\n        .append('path')\r\n        .attr('d', function () {\r\n          return drawArc(0, 10 / r, r + 20)();\r\n        });\r\n\r\n      // hover text background\r\n      var textWrapper = g\r\n        .append('rect')\r\n        .style('fill', d3.rgb(0, 0, 0))\r\n        .style('opacity', 0.7)\r\n        .style('display', 'none');\r\n      // hover text\r\n      var nameText = g\r\n        .append('text')\r\n        .attr('class', 'name')\r\n        .style('fill', d3.rgb(255, 255, 255))\r\n        .attr('font-family', 'Montserrat')\r\n        .attr('text-anchor', 'middle');\r\n\r\n      var percentText = g\r\n        .append('text')\r\n        .attr('x', 0)\r\n        .attr('y', 18)\r\n        .attr('text-anchor', 'middle')\r\n        .attr('font-size', 50)\r\n        .attr('font-family', 'Montserrat')\r\n        .attr('class', 'percent')\r\n        .style('fill', d3.rgb(0, 0, 0));\r\n\r\n      sc.transitionBack = function (callback, options) {\r\n        clipPath1\r\n          .transition()\r\n          .duration(sc.duration)\r\n          .ease(d3.easeCubicOut)\r\n          .attrTween('d', function () {\r\n            var i = d3.interpolate(2 * Math.PI, 10 / r);\r\n\r\n            return function (t) {\r\n              return drawArc(0, i(t), r + 20)();\r\n            };\r\n          })\r\n          .on('end', callback);\r\n\r\n        return sc;\r\n      };\r\n\r\n      sc.transitionForward = function (callback) {\r\n        clipPath1\r\n          .transition()\r\n          .duration(sc.duration)\r\n          .ease(d3.easeCubicOut)\r\n          .attrTween('d', function () {\r\n            var i = d3.interpolate(10 / r, 2 * Math.PI);\r\n\r\n            return function (t) {\r\n              return drawArc(0, i(t), r + 20)();\r\n            };\r\n          })\r\n          .on('end', callback);\r\n\r\n        return sc;\r\n      };\r\n\r\n      if (showOnStart) sc.transitionForward();\r\n\r\n      return sc;\r\n    };\r\n\r\n    // create bar chart\r\n    // SproutChart.prototype.barChart = function (options) {\r\n    //   var sc = this;\r\n\r\n    //   sc.type = 'bar';\r\n\r\n    //   options = options || {};\r\n\r\n    //   var barHeight = options.barHeight || 30,\r\n    //     gap = options.gap || 0,\r\n    //     padding = options.padding || 50,\r\n    //     showOnStart =\r\n    //       options.showOnStart !== undefined ? options.showOnStart : true, // call transitionForward() on start\r\n    //     max;\r\n\r\n    //   sc.data = sc.data.map(function (d, i) {\r\n    //     max = max ? (d.value > max ? d.value : max) : d.value;\r\n\r\n    //     return {\r\n    //       name: d.name,\r\n    //       value: d.value,\r\n    //       color: d.color || sc.materialColor[i],\r\n    //     };\r\n    //   });\r\n    //   // console.log(sc);\r\n    //   var ratio = options.ratio || (sc.size - padding * 2) / max;\r\n\r\n    //   // create the svg container\r\n    //   var g = sc.svg.append('g').attr('class', 'bar');\r\n\r\n    //   g.attr('transform', function () {\r\n    //     // console.log(sc);\r\n    //     var y = (sc.size - sc.data.length * (barHeight + gap) - gap) / 2;\r\n\r\n    //     return 'translate(' + padding + ', ' + y + ')';\r\n    //   });\r\n\r\n    //   var bar = g\r\n    //     .selectAll('rect')\r\n    //     .data(sc.data)\r\n    //     .enter()\r\n    //     .append('rect')\r\n    //     .attr('x', 0)\r\n    //     .attr('y', function (d, i) {\r\n    //       return i * (barHeight + gap);\r\n    //     })\r\n    //     .attr('height', barHeight)\r\n    //     .attr('width', function (d) {\r\n    //       return 2 * d.value;\r\n    //     })\r\n    //     .style('fill', function (d) {\r\n    //       return d.color;\r\n    //     })\r\n\r\n    //     .style('clip-path', 'url(#clipMask)');\r\n\r\n    //   var barValue = g\r\n    //     .selectAll('text')\r\n    //     .data(sc.data)\r\n    //     .enter()\r\n    //     .append('text')\r\n    //     .attr('class', 'bar-value')\r\n    //     .attr('x', function (d) {\r\n    //       return 2 * d.value + 5;\r\n    //     })\r\n    //     .attr('y', function (d, i) {\r\n    //       return i * (barHeight + gap) + barHeight * 0.7;\r\n    //     })\r\n    //     .attr('opacity', 1)\r\n    //     .attr('font-size', barHeight * 0.7)\r\n    //     .attr('font-family', 'Montserrat')\r\n    //     .attr('text-anchor', 'start')\r\n    //     .text(function (d) {\r\n    //       return d.value;\r\n    //     });\r\n\r\n    //   bar.on('mousemove', function (i, d) {\r\n    //     tooltipa\r\n    //       .style('top', i.clientY - 10 + 'px')\r\n    //       .style('left', i.clientX + 10 + 'px')\r\n    //       .text(d.name);\r\n    //     tooltipa.style('visibility', 'visible').text();\r\n    //   });\r\n\r\n    //   bar.on('mouseout', function (d) {\r\n    //     tooltipa.style('visibility', 'hidden');\r\n    //   });\r\n\r\n    //   const r = 150;\r\n    //   const innerRadius = 80;\r\n\r\n    //   var drawArc = function (startAngle, endAngle, outerRadius) {\r\n    //     return d3\r\n    //       .arc()\r\n    //       .startAngle(startAngle)\r\n    //       .endAngle(endAngle)\r\n    //       .innerRadius(innerRadius)\r\n    //       .outerRadius(outerRadius || r);\r\n    //   };\r\n\r\n    //   // var clipPath = g\r\n    //   //   .append('defs')\r\n    //   //   .append('clipPath')\r\n    //   //   .attr('id', 'clipMask')\r\n    //   //   .append('path')\r\n    //   //   .attr('d', function () {\r\n    //   //     return drawArc(0, 10 / r, r + 20)();\r\n    //   //   });\r\n\r\n    //   sc.transitionForward = function (callback) {\r\n    //     bar\r\n    //       .transition()\r\n    //       .duration(sc.duration / 1)\r\n    //       .ease(d3.easeCubicOut)\r\n    //       .delay(function (d, i) {\r\n    //         return (i * (sc.duration / 2)) / sc.data.length;\r\n    //       })\r\n    //       .attr('width', function (d) {\r\n    //         return d.value * ratio;\r\n    //       })\r\n    //       .on('end', function (d, i) {\r\n    //         // console.log(i, d);\r\n    //         if (i === sc.data.length - 1 && typeof callback === 'function')\r\n    //           callback();\r\n    //       });\r\n\r\n    //     barValue\r\n    //       .transition()\r\n    //       .duration(sc.duration / 2)\r\n    //       .ease(d3.easeCubicOut)\r\n    //       .delay(function (d, i) {\r\n    //         return i * (sc.duration / 2 / sc.data.length);\r\n    //       })\r\n    //       .attr('x', function (d) {\r\n    //         return d.value * ratio + barHeight * 0.3;\r\n    //       })\r\n    //       .attr('opacity', 1)\r\n    //       .tween('text', function (d) {\r\n    //         // console.log(d);\r\n    //         var i = d3.interpolate(0, d.value);\r\n\r\n    //         return function (t) {\r\n    //           this.textContent = Math.round(i(t));\r\n    //         };\r\n    //       });\r\n\r\n    //     clipPath\r\n    //       .transition()\r\n    //       .duration((sc.duration * (sc.data.length - 1)) / sc.data.length)\r\n    //       .ease(d3.easeCubicOut)\r\n    //       .attr('height', sc.size);\r\n\r\n    //     return sc;\r\n    //   };\r\n\r\n    //   sc.transitionBack = function (callback) {\r\n    //     bar\r\n    //       .transition()\r\n    //       .duration(sc.duration / 2)\r\n    //       .ease(sc.easing)\r\n    //       .delay(function (d, i) {\r\n    //         return (\r\n    //           (sc.data.length - i - 1) * (sc.duration / 2 / sc.data.length)\r\n    //         );\r\n    //       })\r\n    //       .attr('width', 10)\r\n    //       .each('end', function (d, i) {\r\n    //         if (i === 0 && typeof callback === 'function') callback();\r\n    //       });\r\n\r\n    //     barValue\r\n    //       .transition()\r\n    //       .duration(sc.duration / 2)\r\n    //       .ease(sc.easing)\r\n    //       .delay(function (d, i) {\r\n    //         return (\r\n    //           (sc.data.length - i - 1) * (sc.duration / 2 / sc.data.length)\r\n    //         );\r\n    //       })\r\n    //       .attr('x', barHeight * 0.3)\r\n    //       .attr('opacity', 0)\r\n    //       .tween('text', function (d) {\r\n    //         var i = d3.interpolate(d.value, 0);\r\n\r\n    //         return function (t) {\r\n    //           this.textContent = Math.round(i(t));\r\n    //         };\r\n    //       });\r\n\r\n    //     clipPath\r\n    //       .transition()\r\n    //       .duration((sc.duration * (sc.data.length - 1)) / sc.data.length)\r\n    //       .ease(sc.easing)\r\n    //       .attr('height', barHeight);\r\n    //     return sc;\r\n    //   };\r\n\r\n    //   var clipPath = g\r\n    //     .append('defs')\r\n    //     .append('clipPath')\r\n    //     .attr('id', 'clipMask')\r\n    //     .append('rect')\r\n    //     .attr('x', 0)\r\n    //     .attr('y', 0)\r\n    //     .attr('height', barHeight)\r\n    //     .attr('width', sc.size);\r\n\r\n    //   // hover text background\r\n    //   var textWrapper = g\r\n    //     .append('rect')\r\n    //     .attr('class', 'nameBackground')\r\n    //     .style('fill', d3.rgb(0, 0, 0))\r\n    //     .style('opacity', 0.7)\r\n    //     .style('display', 'none');\r\n    //   // hover text\r\n    //   var nameText = g\r\n    //     .append('text')\r\n    //     .attr('class', 'name')\r\n    //     .style('fill', d3.rgb(255, 255, 255))\r\n    //     .attr('font-family', 'Montserrat')\r\n    //     .attr('text-anchor', 'middle');\r\n\r\n    //   if (showOnStart)\r\n    //     // console.log(sc.transitionForward());\r\n    //     sc.transitionForward();\r\n\r\n    //   return sc;\r\n    // };\r\n\r\n    // SproutChart.prototype.transformTo = function (type, options, callback) {\r\n    //   var sc = this;\r\n\r\n    //   callback = typeof options === 'function' ? options : callback;\r\n    //   options = typeof options === 'object' ? options : {};\r\n\r\n    //   if (sc.type === type || !sc.type) {\r\n    //     return sc;\r\n    //   }\r\n\r\n    // sc.transitionBack();\r\n\r\n    // sc.svg.select('g').transition()\r\n    //     .duration(sc.duration).ease(sc.easing)\r\n    //     .attr('transform', function(d) {\r\n    //         var barHeight = options.barHeight || 30,\r\n    //             gap = options.gap || 0,\r\n    //             padding = options.padding || 50,\r\n    //             r = options.r || 150;\r\n\r\n    //         var y = (sc.size - sc.data.length * (barHeight + gap) - gap) / 2;\r\n\r\n    //         if (type === 'bar')\r\n    //             return 'translate(' + padding + ', ' + (r + y) + ')';\r\n    //         else if (type === 'pie')\r\n    //             return 'translate(' + sc.size / 2 + ', ' + (sc.size / 2 - r) + ')';\r\n    //     })\r\n    //     .each('end', function() {\r\n    //         if (type === 'bar') {\r\n    //             sc.barChart(options);\r\n    //             sc.svg.select('g:not(.bar)').remove();\r\n    //         }\r\n    //         else if (type === 'pie') {\r\n    //             sc.pieChart(options);\r\n    //             sc.svg.select('g:not(.pie)').remove();\r\n    //         }\r\n\r\n    //     });\r\n\r\n    // if (typeof(callback) === 'function') {\r\n    //     callback();\r\n    // }\r\n\r\n    // return sc;\r\n    // };\r\n\r\n    // inject to target DOM\r\n    var chart = new SproutChart(svgRef.current, [\r\n      {\r\n        name: 'Hotel',\r\n        value: 10,\r\n      },\r\n      {\r\n        name: 'High-Education',\r\n        value: 3,\r\n      },\r\n      {\r\n        name: 'Factory',\r\n        value: 9,\r\n      },\r\n      {\r\n        name: 'Muesum',\r\n        value: 5,\r\n      },\r\n      {\r\n        name: 'Bank',\r\n        value: 8,\r\n      },\r\n      {\r\n        name: 'School',\r\n        value: 19,\r\n      },\r\n    ]);\r\n\r\n    const options = {\r\n      r: 80,\r\n      innerRadius: 50,\r\n      rHover: 120,\r\n    };\r\n\r\n    const tooltip = d3\r\n      .select('body')\r\n      .append('div')\r\n      .style('position', 'absolute')\r\n      .style('font-family', \"'Open Sans', sans-serif\")\r\n      .style('font-size', '15px')\r\n      .style('z-index', '10')\r\n      .style('background-color', 'rgb(0, 0, 0)')\r\n      .style('opacity', 0.8)\r\n      .style('color', 'rgb(255, 255, 255)')\r\n      .style('border', 'solid')\r\n      .style('border-color', 'rgb(255, 255, 255)')\r\n      .style('padding', '5px')\r\n      .style('border-radius', '2px')\r\n      .style('visibility', 'hidden');\r\n\r\n    const tooltipa = d3\r\n      .select('body')\r\n      .append('div')\r\n      .style('position', 'absolute')\r\n      .style('font-family', \"'Open Sans', sans-serif\")\r\n      .style('font-size', '15px')\r\n      .style('z-index', '10')\r\n      .style('background-color', 'rgb(0, 0, 0)')\r\n      .style('opacity', 0.8)\r\n      .style('color', 'rgb(255, 255, 255)')\r\n      .style('border', 'solid')\r\n      .style('border-color', 'rgb(255, 255, 255)')\r\n      .style('padding', '5px')\r\n      .style('border-radius', '2px')\r\n      .style('visibility', 'hidden');\r\n\r\n    // create pie chart\r\n    // chart.barChart(options);\r\n    chart.pieChart(options);\r\n  }, [chartType]);\r\n  return (\r\n    // <div className=\"center\">\r\n    <div id=\"container\" ref={svgRef}></div>\r\n  );\r\n};\r\n\r\nexport default CityChart;\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\cityBarChart.jsx",["185","186","187","188","189","190","191","192","193","194"],"import React from 'react';\r\nimport {useEffect} from 'react';\r\nimport {Component, createRef, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst CityBarChart = () => {\r\n  const svgRef = useRef();\r\n\r\n  let chartType = '';\r\n\r\n  function changeBtn(Event) {\r\n    // console.log(Event);\r\n    if (Event.target.value == 'PIE') {\r\n      console.log(2323);\r\n      chartType = 'pie';\r\n    } else if (Event.target.value == 'BAR') {\r\n      chartType = 'bar';\r\n    }\r\n  }\r\n  // console.log(sc)\r\n  useEffect(() => {\r\n    function SproutChart(target, options) {\r\n      'use strict';\r\n      var sc = this;\r\n      console.log(chartType);\r\n\r\n      options = Array.isArray(options)\r\n        ? {\r\n            data: options,\r\n          }\r\n        : options || {};\r\n\r\n      sc.data = options.data || [\r\n        {name: 'Kevin', value: 8},\r\n        {name: 'Bob', value: 8},\r\n        {name: 'Stuart', value: 3},\r\n        {name: 'Gru', value: 5},\r\n      ];\r\n      sc.size = options.size || 250; // svg container size, idealy equals to twice of rHover + max(spaceHover, spaceActive)\r\n      sc.duration = options.duration || 1000; // transition duration of the first time draw the pie chart\r\n      sc.easing = options.easing || 'cubic-in-out'; // transition easing function, same as d3 easing\r\n      sc.materialColor = [\r\n        '#f44336',\r\n        ' #e91e63',\r\n        '#9c27b0',\r\n        '#673ab7',\r\n        '#3f51b5',\r\n        '#2196f3',\r\n        '#03a9f4',\r\n        '#00bcd4',\r\n        '#009688',\r\n        '#4caf50',\r\n        '#8bc34a',\r\n        '#cddc39',\r\n        '#ffeb3b',\r\n        '#ffc107',\r\n        '#ff9800',\r\n        '#ff5722',\r\n        '#795548',\r\n        '#9e9e9e',\r\n        '#607d8b',\r\n      ];\r\n      //this part actually each time creates a new array of colors randomly from the original array\r\n      var ri = Math.floor(Math.random() * sc.materialColor.length);\r\n      sc.materialColor = sc.materialColor\r\n        .slice(ri)\r\n        .concat(sc.materialColor.slice(0, ri));\r\n\r\n      // create the svg container\r\n      sc.svg = d3\r\n        .select(target)\r\n        .append('svg')\r\n        .attr('width', this.size)\r\n        .attr('height', this.size);\r\n\r\n      console.log(sc);\r\n      console.log(sc.svg);\r\n\r\n      return sc;\r\n    }\r\n    // console.log(SproutChart)\r\n    //the rest\r\n    // SproutChart.prototype.pieChart = function (options) {\r\n    //   var sc = this;\r\n    //   sc.type = 'pie';\r\n\r\n    //   options = options || {};\r\n\r\n    //   var r = options.r || 150, // radius of pie chart\r\n    //     innerRadius = options.innerRadius || 80, // the radius of the donut pie inner space\r\n    //     rHover = options.rHover || 160, // radius of pie chart when hover\r\n    //     spaceHover = options.spaceHover || 10, // the space pie pop out when hover\r\n    //     spaceActive = options.spaceActive || 20, // the space pie pop out when active\r\n    //     showOnStart =\r\n    //       options.showOnStart !== undefined ? options.showOnStart : true; // call transitionForward() on start\r\n\r\n    //   //   function to draw arc\r\n    //   var drawArc = function (startAngle, endAngle, outerRadius) {\r\n    //     return d3\r\n    //       .arc()\r\n    //       .startAngle(startAngle)\r\n    //       .endAngle(endAngle)\r\n    //       .innerRadius(innerRadius)\r\n    //       .outerRadius(outerRadius || r);\r\n    //   };\r\n    //   //   map data to arc function\r\n    //   var sum = sc.data\r\n    //     .map(function (d) {\r\n    //       return d.value;\r\n    //     })\r\n    //     .reduce(function (prev, cur) {\r\n    //       return prev + cur;\r\n    //     });\r\n\r\n    //   var accumulate = 0;\r\n    //   sc.data = sc.data.map(function (d, i) {\r\n    //     return {\r\n    //       name: d.name,\r\n    //       value: d.value,\r\n    //       color: d.color || sc.materialColor[i],\r\n    //       arc: drawArc(\r\n    //         accumulate,\r\n    //         (accumulate += (d.value / sum) * 2 * Math.PI)\r\n    //       ),\r\n    //     };\r\n    //   });\r\n\r\n    //   var g = sc.svg\r\n    //     .append('g')\r\n    //     .attr(\r\n    //       'transform',\r\n    //       'translate(' + sc.size / 2 + ', ' + sc.size / 2 + ')'\r\n    //     );\r\n\r\n    //   //get information from data\r\n    //   sc.data.forEach(function (d) {\r\n    //     d.value = +d.value; // calculate count as we iterate through the data\r\n    //     d.enabled = true; // add enabled property to track which entries are checked\r\n    //   });\r\n\r\n    //   // draw for each pie\r\n    //   var pie = g\r\n    //     .selectAll('path')\r\n    //     .data(sc.data)\r\n    //     .enter()\r\n    //     .append('path')\r\n    //     .attr('d', function (d) {\r\n    //       return drawArc(d.arc.startAngle()(), d.arc.endAngle()())();\r\n    //     })\r\n    //     .style('fill', function (d) {\r\n    //       return d.color;\r\n    //     })\r\n\r\n    //     .style('clip-path', 'url(#clipMask)');\r\n\r\n    //   //mouse activity, mouse over\r\n    //   pie.on('mouseover', function (i, d) {\r\n    //     if (!d.active) {\r\n    //       //to elaborate the pie section\r\n    //       tooltip.style('visibility', 'visible').text();\r\n\r\n    //       d3.select(this)\r\n    //         .transition()\r\n    //         .duration(200)\r\n    //         .ease(d3.easeCubicOut)\r\n    //         .attr('d', function (d) {\r\n    //           return drawArc(\r\n    //             d.arc.startAngle()(),\r\n    //             d.arc.endAngle()(),\r\n    //             r + 20\r\n    //           )();\r\n    //         })\r\n    //         .attr('transform', function (d) {\r\n    //           var distance = Math.sqrt(\r\n    //             Math.pow(d.arc.centroid()[0], 2) +\r\n    //               Math.pow(d.arc.centroid()[1], 2)\r\n    //           );\r\n    //           var n = spaceHover / distance;\r\n    //           return (\r\n    //             'translate(' +\r\n    //             n * d.arc.centroid()[0] +\r\n    //             ',' +\r\n    //             n * d.arc.centroid()[1] +\r\n    //             ')'\r\n    //           );\r\n    //         });\r\n\r\n    //       //to show the percentage number\r\n    //       g.select('text.percent')\r\n    //         .transition()\r\n    //         .duration(500)\r\n    //         .ease(d3.easeCubicOut)\r\n    //         .attr('opacity', 1)\r\n    //         .tween('text', function () {\r\n    //           console.log(d);\r\n    //           var j = d3.interpolate(\r\n    //             0,\r\n    //             Math.round(\r\n    //               ((d.arc.endAngle()() - d.arc.startAngle()()) / 2 / Math.PI) *\r\n    //                 100\r\n    //             )\r\n    //           );\r\n    //           return function (t) {\r\n    //             // console.log(t)\r\n    //             this.textContent = Math.round(j(t)) + '%';\r\n    //           };\r\n    //         });\r\n    //     }\r\n    //   });\r\n\r\n    //   //mouse activity, click\r\n    //   pie.on('click', function (i, d) {\r\n    //     if (!d.active) {\r\n    //       d3.select(this)\r\n    //         .transition()\r\n    //         .duration(200)\r\n    //         .ease(d3.easeBounce)\r\n    //         .attr('d', function () {\r\n    //           return drawArc(\r\n    //             d.arc.startAngle()(),\r\n    //             d.arc.endAngle()(),\r\n    //             r + 40\r\n    //           )();\r\n    //         })\r\n    //         .attr('transform', function (d) {\r\n    //           var distance = Math.sqrt(\r\n    //             Math.pow(d.arc.centroid()[0], 2) +\r\n    //               Math.pow(d.arc.centroid()[1], 2)\r\n    //           );\r\n    //           var n = spaceActive / distance;\r\n    //           return (\r\n    //             'translate(' +\r\n    //             n * d.arc.centroid()[0] +\r\n    //             ',' +\r\n    //             n * d.arc.centroid()[1] +\r\n    //             ')'\r\n    //           );\r\n    //         });\r\n    //     }\r\n    //     d.active = !d.active;\r\n    //   });\r\n\r\n    //   //mouse movement, mouse move\r\n    //   pie.on('mousemove', function (i, d) {\r\n    //     // console.log(i)\r\n    //     tooltip\r\n    //       .style('top', i.clientY - 10 + 'px')\r\n    //       .style('left', i.clientX + 10 + 'px')\r\n    //       .text(d.name);\r\n    //   });\r\n\r\n    //   //mouse movement, mouse out\r\n    //   pie.on('mouseout', function (i, d) {\r\n    //     //to finish the tooltip\r\n    //     tooltip.style('visibility', 'hidden');\r\n\r\n    //     if (!d.active) {\r\n    //       d3.select(this)\r\n    //         .transition()\r\n    //         .duration(200)\r\n    //         .ease(d3.easeCubicOut)\r\n    //         .attr('d', function () {\r\n    //           return drawArc(d.arc.startAngle()(), d.arc.endAngle()())();\r\n    //         })\r\n    //         .attr('transform', 'translate(0, 0)');\r\n\r\n    //       g.select('text.percent')\r\n    //         .transition()\r\n    //         .duration(500)\r\n    //         .ease(d3.easeCubicOut)\r\n    //         .attr('opacity', 0);\r\n    //     }\r\n    //     //maybe I can erase these two lines\r\n    //     g.select('rect').style('display', 'none');\r\n    //     g.select('text').text('');\r\n    //   });\r\n\r\n    //   // start transition animation clip path\r\n    //   var clipPath = g\r\n    //     .append('defs')\r\n    //     .append('clipPath')\r\n    //     .attr('id', 'clipMask')\r\n    //     .append('path')\r\n    //     .attr('d', function () {\r\n    //       return drawArc(0, 10 / r, r + 20)();\r\n    //     });\r\n\r\n    //   // hover text background\r\n    //   var textWrapper = g\r\n    //     .append('rect')\r\n    //     .style('fill', d3.rgb(0, 0, 0))\r\n    //     .style('opacity', 0.7)\r\n    //     .style('display', 'none');\r\n    //   // hover text\r\n    //   var nameText = g\r\n    //     .append('text')\r\n    //     .attr('class', 'name')\r\n    //     .style('fill', d3.rgb(255, 255, 255))\r\n    //     .attr('font-family', 'Montserrat')\r\n    //     .attr('text-anchor', 'middle');\r\n\r\n    //   var percentText = g\r\n    //     .append('text')\r\n    //     .attr('x', 0)\r\n    //     .attr('y', 18)\r\n    //     .attr('text-anchor', 'middle')\r\n    //     .attr('font-size', 50)\r\n    //     .attr('font-family', 'Montserrat')\r\n    //     .attr('class', 'percent')\r\n    //     .style('fill', d3.rgb(0, 0, 0));\r\n\r\n    //   sc.transitionBack = function (callback, options) {\r\n    //     clipPath\r\n    //       .transition()\r\n    //       .duration(sc.duration)\r\n    //       .ease(d3.easeCubicOut)\r\n    //       .attrTween('d', function () {\r\n    //         var i = d3.interpolate(2 * Math.PI, 10 / r);\r\n\r\n    //         return function (t) {\r\n    //           return drawArc(0, i(t), r + 20)();\r\n    //         };\r\n    //       })\r\n    //       .on('end', callback);\r\n\r\n    //     return sc;\r\n    //   };\r\n\r\n    //   sc.transitionForward = function (callback) {\r\n    //     clipPath\r\n    //       .transition()\r\n    //       .duration(sc.duration)\r\n    //       .ease(d3.easeCubicOut)\r\n    //       .attrTween('d', function () {\r\n    //         var i = d3.interpolate(10 / r, 2 * Math.PI);\r\n\r\n    //         return function (t) {\r\n    //           return drawArc(0, i(t), r + 20)();\r\n    //         };\r\n    //       })\r\n    //       .on('end', callback);\r\n\r\n    //     return sc;\r\n    //   };\r\n\r\n    //   if (showOnStart) sc.transitionForward();\r\n\r\n    //   return sc;\r\n    // };\r\n\r\n    // create bar chart\r\n    SproutChart.prototype.barChart = function (options) {\r\n      var sc = this;\r\n\r\n      sc.type = 'bar';\r\n\r\n      options = options || {};\r\n\r\n      var barHeight = options.barHeight || 30,\r\n        gap = options.gap || 0,\r\n        padding = options.padding || 50,\r\n        showOnStart =\r\n          options.showOnStart !== undefined ? options.showOnStart : true, // call transitionForward() on start\r\n        max;\r\n\r\n      sc.data = sc.data.map(function (d, i) {\r\n        max = max ? (d.value > max ? d.value : max) : d.value;\r\n\r\n        return {\r\n          name: d.name,\r\n          value: d.value,\r\n          color: d.color || sc.materialColor[i],\r\n        };\r\n      });\r\n      // console.log(sc);\r\n      var ratio = options.ratio || (sc.size - padding * 2) / max;\r\n\r\n      // create the svg container\r\n      var g = sc.svg.append('g').attr('class', 'bar');\r\n\r\n      g.attr('transform', function () {\r\n        // console.log(sc);\r\n        var y = (sc.size - sc.data.length * (barHeight + gap) - gap) / 2;\r\n\r\n        return 'translate(' + padding + ', ' + y + ')';\r\n      });\r\n\r\n      var bar = g\r\n        .selectAll('rect')\r\n        .data(sc.data)\r\n        .enter()\r\n        .append('rect')\r\n        .attr('x', 0)\r\n        .attr('y', function (d, i) {\r\n          return i * (barHeight + gap);\r\n        })\r\n        .attr('height', barHeight)\r\n        .attr('width', function (d) {\r\n          return 2 * d.value;\r\n        })\r\n        .style('fill', function (d) {\r\n          return d.color;\r\n        })\r\n\r\n        .style('clip-path', 'url(#clipMask)');\r\n\r\n      var barValue = g\r\n        .selectAll('text')\r\n        .data(sc.data)\r\n        .enter()\r\n        .append('text')\r\n        .attr('class', 'bar-value')\r\n        .attr('x', function (d) {\r\n          return 2 * d.value + 5;\r\n        })\r\n        .attr('y', function (d, i) {\r\n          return i * (barHeight + gap) + barHeight * 0.7;\r\n        })\r\n        .attr('opacity', 1)\r\n        .attr('font-size', barHeight * 0.7)\r\n        .attr('font-family', 'Montserrat')\r\n        .attr('text-anchor', 'start')\r\n        .text(function (d) {\r\n          return d.value;\r\n        });\r\n\r\n      bar.on('mousemove', function (i, d) {\r\n        tooltipa\r\n          .style('top', i.clientY - 10 + 'px')\r\n          .style('left', i.clientX + 10 + 'px')\r\n          .text(d.name);\r\n        tooltipa.style('visibility', 'visible').text();\r\n      });\r\n\r\n      bar.on('mouseout', function (d) {\r\n        tooltipa.style('visibility', 'hidden');\r\n      });\r\n\r\n      const r = 150;\r\n      const innerRadius = 80;\r\n\r\n      var drawArc = function (startAngle, endAngle, outerRadius) {\r\n        return d3\r\n          .arc()\r\n          .startAngle(startAngle)\r\n          .endAngle(endAngle)\r\n          .innerRadius(innerRadius)\r\n          .outerRadius(outerRadius || r);\r\n      };\r\n\r\n      // var clipPath = g\r\n      //   .append('defs')\r\n      //   .append('clipPath')\r\n      //   .attr('id', 'clipMask')\r\n      //   .append('path')\r\n      //   .attr('d', function () {\r\n      //     return drawArc(0, 10 / r, r + 20)();\r\n      //   });\r\n      var clipPath = g\r\n        .append('defs')\r\n        .append('clipPath')\r\n        .attr('id', 'clipMask')\r\n        .append('rect')\r\n        .attr('x', 0)\r\n        .attr('y', 0)\r\n        .attr('height', barHeight)\r\n        .attr('width', sc.size);\r\n\r\n      sc.transitionForward = function (callback) {\r\n        bar\r\n          .transition()\r\n          .duration(sc.duration / 1)\r\n          .ease(d3.easeCubicOut)\r\n          .delay(function (d, i) {\r\n            return (i * (sc.duration / 2)) / sc.data.length;\r\n          })\r\n          .attr('width', function (d) {\r\n            return d.value * ratio;\r\n          })\r\n          .on('end', function (d, i) {\r\n            // console.log(i, d);\r\n            if (i === sc.data.length - 1 && typeof callback === 'function')\r\n              callback();\r\n          });\r\n\r\n        barValue\r\n          .transition()\r\n          .duration(sc.duration / 2)\r\n          .ease(d3.easeCubicOut)\r\n          .delay(function (d, i) {\r\n            return i * (sc.duration / 2 / sc.data.length);\r\n          })\r\n          .attr('x', function (d) {\r\n            return d.value * ratio + barHeight * 0.3;\r\n          })\r\n          .attr('opacity', 1)\r\n          .tween('text', function (d) {\r\n            // console.log(d);\r\n            var i = d3.interpolate(0, d.value);\r\n\r\n            return function (t) {\r\n              this.textContent = Math.round(i(t));\r\n            };\r\n          })\r\n          .style('fill', 'rgb(255,255,255)');\r\n\r\n        clipPath\r\n          .transition()\r\n          .duration((sc.duration * (sc.data.length - 1)) / sc.data.length)\r\n          .ease(d3.easeCubicOut)\r\n          .attr('height', sc.size);\r\n\r\n        return sc;\r\n      };\r\n\r\n      sc.transitionBack = function (callback) {\r\n        bar\r\n          .transition()\r\n          .duration(sc.duration / 2)\r\n          .ease(sc.easing)\r\n          .delay(function (d, i) {\r\n            return (\r\n              (sc.data.length - i - 1) * (sc.duration / 2 / sc.data.length)\r\n            );\r\n          })\r\n          .attr('width', 10)\r\n          .each('end', function (d, i) {\r\n            if (i === 0 && typeof callback === 'function') callback();\r\n          });\r\n\r\n        barValue\r\n          .transition()\r\n          .duration(sc.duration / 2)\r\n          .ease(sc.easing)\r\n          .delay(function (d, i) {\r\n            return (\r\n              (sc.data.length - i - 1) * (sc.duration / 2 / sc.data.length)\r\n            );\r\n          })\r\n          .attr('x', barHeight * 0.3)\r\n          .attr('opacity', 0)\r\n          .tween('text', function (d) {\r\n            var i = d3.interpolate(d.value, 0);\r\n\r\n            return function (t) {\r\n              this.textContent = Math.round(i(t));\r\n            };\r\n          });\r\n\r\n        clipPath\r\n          .transition()\r\n          .duration((sc.duration * (sc.data.length - 1)) / sc.data.length)\r\n          .ease(sc.easing)\r\n          .attr('height', barHeight);\r\n        return sc;\r\n      };\r\n\r\n      // hover text background\r\n      var textWrapper = g\r\n        .append('rect')\r\n        .attr('class', 'nameBackground')\r\n        .style('fill', d3.rgb(0, 0, 0))\r\n        .style('opacity', 0.7)\r\n        .style('display', 'none');\r\n      // hover text\r\n      var nameText = g\r\n        .append('text')\r\n        .attr('class', 'name')\r\n        .style('fill', d3.rgb(255, 255, 255))\r\n        .attr('font-family', 'Montserrat')\r\n        .attr('text-anchor', 'middle');\r\n\r\n      if (showOnStart)\r\n        // console.log(sc.transitionForward());\r\n        sc.transitionForward();\r\n\r\n      return sc;\r\n    };\r\n\r\n    // inject to target DOM\r\n    var chart = new SproutChart(svgRef.current, [\r\n      {\r\n        name: 'Hotel',\r\n        value: 10,\r\n      },\r\n      {\r\n        name: 'High-Education',\r\n        value: 3,\r\n      },\r\n      {\r\n        name: 'Factory',\r\n        value: 9,\r\n      },\r\n      {\r\n        name: 'Muesum',\r\n        value: 5,\r\n      },\r\n      {\r\n        name: 'Bank',\r\n        value: 8,\r\n      },\r\n      {\r\n        name: 'School',\r\n        value: 19,\r\n      },\r\n    ]);\r\n\r\n    const options = {\r\n      r: 80,\r\n      innerRadius: 50,\r\n      rHover: 120,\r\n    };\r\n\r\n    const tooltip = d3\r\n      .select('body')\r\n      .append('div')\r\n      .style('position', 'absolute')\r\n      .style('font-family', \"'Open Sans', sans-serif\")\r\n      .style('font-size', '15px')\r\n      .style('z-index', '10')\r\n      .style('background-color', 'rgb(0, 0, 0)')\r\n      .style('opacity', 0.8)\r\n      .style('color', 'rgb(255, 255, 255)')\r\n      .style('border', 'solid')\r\n      .style('border-color', 'rgb(255, 255, 255)')\r\n      .style('padding', '5px')\r\n      .style('border-radius', '2px')\r\n      .style('visibility', 'hidden');\r\n\r\n    const tooltipa = d3\r\n      .select('body')\r\n      .append('div')\r\n      .style('position', 'absolute')\r\n      .style('font-family', \"'Open Sans', sans-serif\")\r\n      .style('font-size', '15px')\r\n      .style('z-index', '10')\r\n      .style('background-color', 'rgb(0, 0, 0)')\r\n      .style('opacity', 0.8)\r\n      .style('color', 'rgb(255, 255, 255)')\r\n      .style('border', 'solid')\r\n      .style('border-color', 'rgb(255, 255, 255)')\r\n      .style('padding', '5px')\r\n      .style('border-radius', '2px')\r\n      .style('visibility', 'hidden');\r\n\r\n    chart.barChart(options);\r\n  }, [chartType]);\r\n  return (\r\n    // <div className=\"center\">\r\n    <div id=\"container\" ref={svgRef}></div>\r\n  );\r\n};\r\n\r\nexport default CityBarChart;\r\n",{"ruleId":"195","severity":1,"message":"196","line":5,"column":8,"nodeType":"197","messageId":"198","endLine":5,"endColumn":15},{"ruleId":"195","severity":1,"message":"199","line":7,"column":8,"nodeType":"197","messageId":"198","endLine":7,"endColumn":11},{"ruleId":"195","severity":1,"message":"200","line":8,"column":13,"nodeType":"197","messageId":"198","endLine":8,"endColumn":15},{"ruleId":"195","severity":1,"message":"201","line":9,"column":8,"nodeType":"197","messageId":"198","endLine":9,"endColumn":16},{"ruleId":"195","severity":1,"message":"202","line":10,"column":8,"nodeType":"197","messageId":"198","endLine":10,"endColumn":11},{"ruleId":"195","severity":1,"message":"203","line":11,"column":8,"nodeType":"197","messageId":"198","endLine":11,"endColumn":17},{"ruleId":"195","severity":1,"message":"204","line":12,"column":8,"nodeType":"197","messageId":"198","endLine":12,"endColumn":12},{"ruleId":"195","severity":1,"message":"205","line":14,"column":8,"nodeType":"197","messageId":"198","endLine":14,"endColumn":19},{"ruleId":"195","severity":1,"message":"206","line":15,"column":8,"nodeType":"197","messageId":"198","endLine":15,"endColumn":20},{"ruleId":"195","severity":1,"message":"207","line":24,"column":8,"nodeType":"197","messageId":"198","endLine":24,"endColumn":17},{"ruleId":"208","severity":1,"message":"209","line":27,"column":3,"nodeType":"210","messageId":"211","endLine":29,"endColumn":4},{"ruleId":"212","severity":1,"message":"213","line":105,"column":15,"nodeType":"197","messageId":"214","endLine":105,"endColumn":22},{"ruleId":"212","severity":1,"message":"215","line":114,"column":22,"nodeType":"197","messageId":"214","endLine":114,"endColumn":36},{"ruleId":"212","severity":1,"message":"216","line":123,"column":27,"nodeType":"197","messageId":"214","endLine":123,"endColumn":46},{"ruleId":"212","severity":1,"message":"217","line":132,"column":16,"nodeType":"197","messageId":"214","endLine":132,"endColumn":24},{"ruleId":"212","severity":1,"message":"218","line":165,"column":12,"nodeType":"197","messageId":"214","endLine":165,"endColumn":16},{"ruleId":"195","severity":1,"message":"219","line":173,"column":11,"nodeType":"197","messageId":"198","endLine":173,"endColumn":17},{"ruleId":"195","severity":1,"message":"220","line":184,"column":11,"nodeType":"197","messageId":"198","endLine":184,"endColumn":20},{"ruleId":"195","severity":1,"message":"221","line":185,"column":11,"nodeType":"197","messageId":"198","endLine":185,"endColumn":21},{"ruleId":"195","severity":1,"message":"222","line":1,"column":27,"nodeType":"197","messageId":"198","endLine":1,"endColumn":36},{"ruleId":"195","severity":1,"message":"200","line":2,"column":13,"nodeType":"197","messageId":"198","endLine":2,"endColumn":15},{"ruleId":"195","severity":1,"message":"223","line":29,"column":11,"nodeType":"197","messageId":"198","endLine":29,"endColumn":19},{"ruleId":"195","severity":1,"message":"224","line":30,"column":7,"nodeType":"197","messageId":"198","endLine":30,"endColumn":16},{"ruleId":"195","severity":1,"message":"225","line":33,"column":7,"nodeType":"197","messageId":"198","endLine":33,"endColumn":10},{"ruleId":"195","severity":1,"message":"222","line":1,"column":27,"nodeType":"197","messageId":"198","endLine":1,"endColumn":36},{"ruleId":"195","severity":1,"message":"226","line":33,"column":11,"nodeType":"197","messageId":"198","endLine":33,"endColumn":22},{"ruleId":"195","severity":1,"message":"227","line":102,"column":11,"nodeType":"197","messageId":"198","endLine":102,"endColumn":20},{"ruleId":"208","severity":1,"message":"209","line":5,"column":3,"nodeType":"210","messageId":"211","endLine":7,"endColumn":4},{"ruleId":"195","severity":1,"message":"228","line":17,"column":20,"nodeType":"197","messageId":"198","endLine":17,"endColumn":24},{"ruleId":"195","severity":1,"message":"229","line":21,"column":11,"nodeType":"197","messageId":"198","endLine":21,"endColumn":17},{"ruleId":"195","severity":1,"message":"230","line":1,"column":16,"nodeType":"197","messageId":"198","endLine":1,"endColumn":24},{"ruleId":"231","severity":1,"message":"232","line":8,"column":13,"nodeType":"233","endLine":44,"endColumn":4},{"ruleId":"195","severity":1,"message":"230","line":1,"column":16,"nodeType":"197","messageId":"198","endLine":1,"endColumn":24},{"ruleId":"195","severity":1,"message":"230","line":1,"column":16,"nodeType":"197","messageId":"198","endLine":1,"endColumn":24},{"ruleId":"195","severity":1,"message":"234","line":3,"column":13,"nodeType":"197","messageId":"198","endLine":3,"endColumn":17},{"ruleId":"195","severity":1,"message":"235","line":4,"column":8,"nodeType":"197","messageId":"198","endLine":4,"endColumn":22},{"ruleId":"231","severity":1,"message":"236","line":64,"column":6,"nodeType":"237","endLine":64,"endColumn":27,"suggestions":"238"},{"ruleId":"195","severity":1,"message":"230","line":1,"column":16,"nodeType":"197","messageId":"198","endLine":1,"endColumn":24},{"ruleId":"195","severity":1,"message":"239","line":57,"column":9,"nodeType":"197","messageId":"198","endLine":57,"endColumn":19},{"ruleId":"195","severity":1,"message":"240","line":61,"column":13,"nodeType":"197","messageId":"198","endLine":61,"endColumn":25},{"ruleId":"231","severity":1,"message":"241","line":135,"column":6,"nodeType":"237","endLine":135,"endColumn":38,"suggestions":"242"},{"ruleId":"195","severity":1,"message":"230","line":1,"column":16,"nodeType":"197","messageId":"198","endLine":1,"endColumn":24},{"ruleId":"195","severity":1,"message":"239","line":32,"column":9,"nodeType":"197","messageId":"198","endLine":32,"endColumn":19},{"ruleId":"231","severity":1,"message":"243","line":59,"column":6,"nodeType":"237","endLine":59,"endColumn":30,"suggestions":"244"},{"ruleId":"195","severity":1,"message":"230","line":1,"column":16,"nodeType":"197","messageId":"198","endLine":1,"endColumn":24},{"ruleId":"195","severity":1,"message":"234","line":3,"column":13,"nodeType":"197","messageId":"198","endLine":3,"endColumn":17},{"ruleId":"195","severity":1,"message":"235","line":4,"column":8,"nodeType":"197","messageId":"198","endLine":4,"endColumn":22},{"ruleId":"195","severity":1,"message":"239","line":66,"column":9,"nodeType":"197","messageId":"198","endLine":66,"endColumn":19},{"ruleId":"231","severity":1,"message":"245","line":153,"column":6,"nodeType":"237","endLine":153,"endColumn":21,"suggestions":"246"},{"ruleId":"195","severity":1,"message":"234","line":3,"column":13,"nodeType":"197","messageId":"198","endLine":3,"endColumn":17},{"ruleId":"208","severity":1,"message":"209","line":6,"column":3,"nodeType":"210","messageId":"211","endLine":9,"endColumn":4},{"ruleId":"195","severity":1,"message":"247","line":37,"column":11,"nodeType":"197","messageId":"198","endLine":37,"endColumn":17},{"ruleId":"195","severity":1,"message":"248","line":91,"column":11,"nodeType":"197","messageId":"198","endLine":91,"endColumn":15},{"ruleId":"195","severity":1,"message":"230","line":1,"column":16,"nodeType":"197","messageId":"198","endLine":1,"endColumn":24},{"ruleId":"195","severity":1,"message":"234","line":3,"column":13,"nodeType":"197","messageId":"198","endLine":3,"endColumn":17},{"ruleId":"195","severity":1,"message":"235","line":4,"column":8,"nodeType":"197","messageId":"198","endLine":4,"endColumn":22},{"ruleId":"231","severity":1,"message":"236","line":70,"column":6,"nodeType":"237","endLine":70,"endColumn":30,"suggestions":"249"},{"ruleId":"195","severity":1,"message":"230","line":1,"column":16,"nodeType":"197","messageId":"198","endLine":1,"endColumn":24},{"ruleId":"195","severity":1,"message":"250","line":52,"column":13,"nodeType":"197","messageId":"198","endLine":52,"endColumn":16},{"ruleId":"231","severity":1,"message":"251","line":152,"column":6,"nodeType":"237","endLine":152,"endColumn":38,"suggestions":"252"},{"ruleId":"195","severity":1,"message":"230","line":1,"column":16,"nodeType":"197","messageId":"198","endLine":1,"endColumn":24},{"ruleId":"195","severity":1,"message":"253","line":3,"column":9,"nodeType":"197","messageId":"198","endLine":3,"endColumn":14},{"ruleId":"195","severity":1,"message":"254","line":27,"column":11,"nodeType":"197","messageId":"198","endLine":27,"endColumn":16},{"ruleId":"195","severity":1,"message":"255","line":112,"column":9,"nodeType":"197","messageId":"198","endLine":112,"endColumn":14},{"ruleId":"195","severity":1,"message":"230","line":1,"column":16,"nodeType":"197","messageId":"198","endLine":1,"endColumn":24},{"ruleId":"195","severity":1,"message":"256","line":2,"column":9,"nodeType":"197","messageId":"198","endLine":2,"endColumn":18},{"ruleId":"195","severity":1,"message":"234","line":4,"column":13,"nodeType":"197","messageId":"198","endLine":4,"endColumn":17},{"ruleId":"195","severity":1,"message":"235","line":5,"column":8,"nodeType":"197","messageId":"198","endLine":5,"endColumn":22},{"ruleId":"195","severity":1,"message":"257","line":30,"column":11,"nodeType":"197","messageId":"198","endLine":30,"endColumn":22},{"ruleId":"195","severity":1,"message":"239","line":68,"column":9,"nodeType":"197","messageId":"198","endLine":68,"endColumn":19},{"ruleId":"231","severity":1,"message":"245","line":119,"column":6,"nodeType":"237","endLine":119,"endColumn":21,"suggestions":"258"},{"ruleId":"195","severity":1,"message":"259","line":3,"column":9,"nodeType":"197","messageId":"198","endLine":3,"endColumn":18},{"ruleId":"195","severity":1,"message":"222","line":3,"column":20,"nodeType":"197","messageId":"198","endLine":3,"endColumn":29},{"ruleId":"195","severity":1,"message":"260","line":11,"column":12,"nodeType":"197","messageId":"198","endLine":11,"endColumn":21},{"ruleId":"261","severity":1,"message":"262","line":13,"column":28,"nodeType":"263","messageId":"264","endLine":13,"endColumn":30},{"ruleId":"261","severity":1,"message":"262","line":16,"column":35,"nodeType":"263","messageId":"264","endLine":16,"endColumn":37},{"ruleId":"265","severity":1,"message":"266","line":23,"column":7,"nodeType":"267","messageId":"268","endLine":23,"endColumn":20,"fix":"269"},{"ruleId":"195","severity":1,"message":"270","line":91,"column":9,"nodeType":"197","messageId":"198","endLine":91,"endColumn":15},{"ruleId":"195","severity":1,"message":"271","line":290,"column":11,"nodeType":"197","messageId":"198","endLine":290,"endColumn":22},{"ruleId":"195","severity":1,"message":"272","line":296,"column":11,"nodeType":"197","messageId":"198","endLine":296,"endColumn":19},{"ruleId":"195","severity":1,"message":"273","line":303,"column":11,"nodeType":"197","messageId":"198","endLine":303,"endColumn":22},{"ruleId":"195","severity":1,"message":"274","line":677,"column":11,"nodeType":"197","messageId":"198","endLine":677,"endColumn":19},{"ruleId":"195","severity":1,"message":"259","line":3,"column":9,"nodeType":"197","messageId":"198","endLine":3,"endColumn":18},{"ruleId":"195","severity":1,"message":"222","line":3,"column":20,"nodeType":"197","messageId":"198","endLine":3,"endColumn":29},{"ruleId":"195","severity":1,"message":"260","line":11,"column":12,"nodeType":"197","messageId":"198","endLine":11,"endColumn":21},{"ruleId":"261","severity":1,"message":"262","line":13,"column":28,"nodeType":"263","messageId":"264","endLine":13,"endColumn":30},{"ruleId":"261","severity":1,"message":"262","line":16,"column":35,"nodeType":"263","messageId":"264","endLine":16,"endColumn":37},{"ruleId":"265","severity":1,"message":"266","line":23,"column":7,"nodeType":"267","messageId":"268","endLine":23,"endColumn":20,"fix":"275"},{"ruleId":"195","severity":1,"message":"276","line":442,"column":11,"nodeType":"197","messageId":"198","endLine":442,"endColumn":18},{"ruleId":"195","severity":1,"message":"271","line":559,"column":11,"nodeType":"197","messageId":"198","endLine":559,"endColumn":22},{"ruleId":"195","severity":1,"message":"272","line":566,"column":11,"nodeType":"197","messageId":"198","endLine":566,"endColumn":19},{"ruleId":"195","severity":1,"message":"277","line":614,"column":11,"nodeType":"197","messageId":"198","endLine":614,"endColumn":18},"no-unused-vars","'datamap' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'d3' is defined but never used.","'ReactDOM' is defined but never used.","'Map' is defined but never used.","'MapBoston' is defined but never used.","'Map2' is defined but never used.","'Boxfunction' is defined but never used.","'Boxfunction1' is defined but never used.","'CityChart' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-self-assign","'country' is assigned to itself.","selfAssignment","'countryOverMap' is assigned to itself.","'countryOverBarchart' is assigned to itself.","'province' is assigned to itself.","'city' is assigned to itself.","'window' is assigned a value but never used.","'cityWidth' is assigned a value but never used.","'cityHeight' is assigned a value but never used.","'createRef' is defined but never used.","'mapWidth' is assigned a value but never used.","'mapHeight' is assigned a value but never used.","'map' is assigned a value but never used.","'provinceMap' is assigned a value but never used.","'removeMap' is assigned a value but never used.","'Read' is defined but never used.","'mapsvg' is assigned a value but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'turf' is defined but never used.","'PathProjection' is defined but never used.","React Hook useEffect has missing dependencies: 'handleClick' and 'province'. Either include them or remove the dependency array. If 'handleClick' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["278"],"'mapfeatuer' is assigned a value but never used.","'bounding_box' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleCountryName' and 'handleCountryOver'. Either include them or remove the dependency array. If 'handleCountryName' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["279"],"React Hook useEffect has a missing dependency: 'handleClick'. Either include it or remove the dependency array. If 'handleClick' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["280"],"React Hook useEffect has missing dependencies: 'country' and 'provinceName'. Either include them or remove the dependency array. If 'provinceName' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["281"],"'handle' is assigned a value but never used.","'data' is assigned a value but never used.",["282"],"'bar' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleBarchartOver', 'margin.bottom', 'margin.left', 'margin.right', and 'margin.top'. Either include them or remove the dependency array. If 'handleBarchartOver' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["283"],"'color' is defined but never used.","'datab' is assigned a value but never used.","'pathh' is assigned a value but never used.","'Container' is defined but never used.","'handleClick' is assigned a value but never used.",["284"],"'Component' is defined but never used.","'changeBtn' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"285","text":"286"},"'rHover' is assigned a value but never used.","'textWrapper' is assigned a value but never used.","'nameText' is assigned a value but never used.","'percentText' is assigned a value but never used.","'tooltipa' is assigned a value but never used.",{"range":"287","text":"286"},"'drawArc' is assigned a value but never used.","'tooltip' is assigned a value but never used.",{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"294","fix":"300"},[556,569],"",[559,572],"Update the dependencies array to be: [height, width, city, province, handleClick]",{"range":"301","text":"302"},"Update the dependencies array to be: [height, width, selectedCountry, handleCountryName, handleCountryOver]",{"range":"303","text":"304"},"Update the dependencies array to be: [height, width, country, handleClick]",{"range":"305","text":"306"},"Update the dependencies array to be: [country, height, provinceName, width]",{"range":"307","text":"308"},"Update the dependencies array to be: [height, width, country, handleClick, province]",{"range":"309","text":"310"},"Update the dependencies array to be: [height, width, selectedCountry, handleBarchartOver, margin.left, margin.right, margin.bottom, margin.top]",{"range":"311","text":"312"},{"range":"313","text":"308"},[2131,2152],"[height, width, city, province, handleClick]",[4306,4338],"[height, width, selectedCountry, handleCountryName, handleCountryOver]",[1789,1813],"[height, width, country, handleClick]",[5116,5131],"[country, height, provinceName, width]",[2135,2159],"[height, width, country, handleClick, province]",[4839,4871],"[height, width, selectedCountry, handleBarchartOver, margin.left, margin.right, margin.bottom, margin.top]",[3938,3953]]