[{"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\index.js":"1","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\App.js":"2","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\reportWebVitals.js":"3","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\map.jsx":"4","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mapBoston.jsx":"5","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\data\\map2.jsx":"6","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\box.jsx":"7","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\boxfunction.jsx":"8","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\boxfunction1.jsx":"9","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\smallProvince.jsx":"10","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\tools\\pathProjection.jsx":"11","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\MainWorld.jsx":"12","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\smallWorld.jsx":"13","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mainCountry.jsx":"14","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mainProvince.jsx":"15","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\smallCountry.jsx":"16","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\barChart.jsx":"17","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\pieChart.jsx":"18"},{"size":500,"mtime":1606146612682,"results":"19","hashOfConfig":"20"},{"size":8763,"mtime":1613081923391,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1606146612682,"results":"22","hashOfConfig":"20"},{"size":6005,"mtime":1610562946292,"results":"23","hashOfConfig":"20"},{"size":2274,"mtime":1608232851551,"results":"24","hashOfConfig":"20"},{"size":3305,"mtime":1610563022744,"results":"25","hashOfConfig":"20"},{"size":1498,"mtime":1610741930308,"results":"26","hashOfConfig":"20"},{"size":1317,"mtime":1610908339355,"results":"27","hashOfConfig":"20"},{"size":1758,"mtime":1612133890335,"results":"28","hashOfConfig":"20"},{"size":2212,"mtime":1612529058997,"results":"29","hashOfConfig":"20"},{"size":344,"mtime":1611697521754,"results":"30","hashOfConfig":"20"},{"size":4400,"mtime":1613079082912,"results":"31","hashOfConfig":"20"},{"size":1873,"mtime":1612825391839,"results":"32","hashOfConfig":"20"},{"size":5191,"mtime":1613079369096,"results":"33","hashOfConfig":"20"},{"size":5221,"mtime":1613081169215,"results":"34","hashOfConfig":"20"},{"size":2219,"mtime":1613081894468,"results":"35","hashOfConfig":"20"},{"size":4125,"mtime":1612826221656,"results":"36","hashOfConfig":"20"},{"size":6323,"mtime":1612908564833,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1qi1qn6",{"filePath":"41","messages":"42","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"40"},"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\index.js",[],["84","85"],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\App.js",["86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101"],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\reportWebVitals.js",[],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\map.jsx",["102","103","104","105","106"],"import React, {Component, createRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nclass Map extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.thismap = React.createRef();\r\n  }\r\n  async componentDidMount (error, info) {\r\n    //reading map data\r\n    // d3.json('data/overijssel.json')\r\n    //   .then(function (data) {\r\n    //     const map = data;\r\n    //     console.log(typeof map);\r\n    //     console.log(map);\r\n    //     return map;\r\n    //   })\r\n    //   .catch((err) => console.log(err.message));\r\n    \r\n    // // };\r\n    // // readingMapData('data/overijssel.json', function (mapp) {\r\n    // //   console.log(mapp.features);\r\n    // // });\r\n    // // readingMapData();\r\n    // // console.log(mmap.features);\r\n    // // console.log(readingMapData())\r\n    // // const mapp = readingMapData();\r\n    // // console.log(mapp.features)\r\n    const mapWidth = 600,\r\n      mapHeight = 1200;\r\n\r\n    // A function to set the projection\r\nconst map = this.props.map\r\n  }\r\n  // provinceMap();\r\n\r\n\r\n  render() {\r\n    console.log(this.props.data)\r\n    return (\r\n      <div>\r\n        <p>this is the map section</p>\r\n        <div ref={this.thismap}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\nexport default Map;\r\n\r\n//the next plan would be to add a mep of netherlands and assign it to the whole picture\r\n// const coordProjection = (\r\n//   translateX,\r\n//   translateY,\r\n//   scale = 200,\r\n//   lat = 6,\r\n//   long = 52.5\r\n// ) => {\r\n//   const myProjection = d3\r\n//     .geoMercator()\r\n//     .center([lat, long])\r\n//     .scale(scale)\r\n//     .translate([translateX, translateY]);\r\n//   return d3.geoPath().projection(myProjection);\r\n// };\r\n\r\n// const provinceMap = async (\r\n//   where = this.thismap.current,\r\n//   height,\r\n//   width,\r\n//   scale\r\n// ) => {\r\n//   console.log('this is province map');\r\n\r\n\r\n\r\n\r\n//   let mapsvg = d3\r\n//     .select(where)\r\n//     .append('svg')\r\n//     .attr('width', `${mapHeight}px`)\r\n//     .attr('height', `${mapWidth}px`)\r\n//     .style('border', '2px solid black')\r\n//     .append('g');\r\n\r\n//   let svgpath = coordProjection(mapWidth, mapHeight / 2 - 300);\r\n// //   const provincedata = async () => {\r\n\r\n// //     return await this.props.data;\r\n// //   }\r\n  \r\n\r\n//   }\r\n//  mapsvg\r\n//     .selectAll('path')\r\n//     .data(map.features)\r\n//     .enter()\r\n//     // for each d create an svgpath that uses the geoPath generator:\r\n//     .append('path')\r\n//     //   .attr('class', 'municipality')\r\n//     .attr('d', svgpath)\r\n//     .style('fill', 'white')\r\n//     .style('stroke', 'rgb(250, 200, 250)')\r\n//     .style('stroke-width', 2)\r\n    // //mouse events\r\n    // .on('mouseover', function (d, i) {\r\n    //   d3.select(this).style('fill', 'red');\r\n    // })\r\n    // .on('mouseout', function (d, i) {\r\n    //   d3.select(this).style('fill', 'white');\r\n    // })\r\n\r\n    // .on('click', function (d, i) {\r\n    //   //the layer shoud be off\r\n\r\n    //   //this remove works but not perfect, and it works good to remove all the shapes\r\n    //   // mapsvg.selectAll('path').remove();\r\n    //   mapsvg.remove();\r\n//       //this also works to change the whole color of the shape\r\n//       // mapsvg.selectAll('path').transition().style('fill', 'red');\r\n\r\n//       // .style('border', '20px solid black')\r\n//       //   .attr('width', `1000px`)\r\n//       // .attr('height', `1000px`)\r\n\r\n//       svgpath = coordProjection(50, 80, 7000);\r\n//       // const mapsvg = d3\r\n//       // .select(where)\r\n//       // .append('svg')\r\n//       // .attr('width', `${mapHeight}px`)\r\n//       // .attr('height', `${mapWidth}px`)\r\n//       // .style('border', '1px solid black')\r\n//       // .append('g');\r\n//       let mapsvg = d3\r\n//         .select(where)\r\n//         .append('svg')\r\n//         .attr('width', `200px`)\r\n//         .attr('height', `300px`)\r\n//         .style('border', '2px solid black')\r\n//         .append('g')\r\n//         .selectAll('path')\r\n//         .data(map.features)\r\n//         .enter()\r\n//         // for each d create an svgpath that uses the geoPath generator:\r\n//         .append('path')\r\n//         //   .attr('class', 'municipality')\r\n//         .attr('d', svgpath)\r\n//         .style('fill', 'white')\r\n//         .style('stroke', 'rgb(250, 200, 250)')\r\n//         .style('stroke-width', 2);\r\n\r\n//       // mapsvg.transition()\r\n//       // .duration(500).style('fill', 'white')\r\n//       //redraw the same layer in other place with the smaller scale\r\n//       // d3.select(this).scale(5000);\r\n//     });\r\n//   let mapsvg1 = d3\r\n//     .select(where)\r\n//     .append('svg')\r\n//     .attr('width', `200px`)\r\n//     .attr('height', `300px`)\r\n//     .attr('transform', `translate(0, -10)`)\r\n//     .style('border', '2px solid black')\r\n//     .append('g')\r\n//     .selectAll('path')\r\n//     .data(map.features)\r\n//     .enter()\r\n//     // for each d create an svgpath that uses the geoPath generator:\r\n//     .append('path')\r\n//     //   .attr('class', 'municipality')\r\n//     .attr('d', svgpath)\r\n//     .style('fill', 'white')\r\n//     .style('stroke', 'rgb(250, 200, 250)')\r\n//     .style('stroke-width', 2);\r\n// };\r\n\r\n// //mouse events functions\r\n// const mouseOverHandler = (d, i) => {\r\n//   console.log('mouseover');\r\n// };\r\n\r\n// const clickHandler = () => {\r\n//   //1- remove the main map\r\n//   //2- change it to the up left\r\n//   //3- draw a new small map\r\n//   //4- draom a new map for the next level, based on the selected polygone\r\n//   console.log('click');\r\n\r\n//   d3.select(this.thismap.current).selectAll('path').remove();\r\n//   // mapsvg\r\n//   //   .append('rect')\r\n//   //   .attr('width', `${20}px`)\r\n//   //   .attr('height', `${20}px`)\r\n//   //   .style('border', '1px solid black')\r\n//   //   .attr('transform', `translate(${0}, ${0})`);\r\n// };\r\n\r\n// const mouseOutHandler = () => {\r\n//   console.log('mouseout');\r\n// };\r\n\r\n// // asynchronously load geojson:\r\n// //reading data\r\n\r\n// // console.log(map.features);\r\n// const removeMap = (where) => {\r\n//   d3.select(where).selectAll('path').remove();\r\n// };\r\n// provinceMap();","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mapBoston.jsx",[],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\data\\map2.jsx",["107","108","109"],"import React, {Component, createRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nclass Map2 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.thismap = React.createRef();\r\n  }\r\n  componentDidMount(error, info) {\r\n    //reading map data\r\n    d3.json('data/geoserver.json')\r\n      .then(function (data) {\r\n        const map = data;\r\n        console.log(typeof map);\r\n        console.log(map);\r\n        return map;\r\n      })\r\n      .catch((err) => console.log(err.message));\r\n    // const data = await this.props.data;\r\n\r\n    // };\r\n    // readingMapData('data/overijssel.json', function (mapp) {\r\n    //   console.log(mapp.features);\r\n    // });\r\n    // readingMapData();\r\n    // console.log(mmap.features);\r\n    // console.log(readingMapData())\r\n    // const mapp = readingMapData();\r\n    // console.log(mapp.features)\r\n    const mapWidth = 350,\r\n      mapHeight = 400;\r\n\r\n    const provinceMap = async (\r\n      where = this.thismap.current,\r\n      height,\r\n      width,\r\n      scale\r\n    ) => {\r\n      console.log('this is province map');\r\n      const mapsvg = d3\r\n        .select(where)\r\n        .append('svg')\r\n        .attr('width', `${mapHeight}px`)\r\n        .attr('height', `${mapWidth}px`)\r\n        .style('border', '1px solid black')\r\n        .append('g');\r\n\r\n      const myProj = d3\r\n        .geoMercator()\r\n        .center([-10, 30])\r\n        .scale(60)\r\n        .translate([mapWidth / 2, mapHeight / 2]);\r\n\r\n      const svgpath = d3.geoPath().projection(myProj);\r\n      const map = await this.props.data;\r\n      mapsvg\r\n        .selectAll('path')\r\n        .data(map.features)\r\n        .enter()\r\n        // for each d create an svgpath that uses the geoPath generator:\r\n        .append('path')\r\n        //   .attr('class', 'municipality')\r\n        .attr('d', svgpath)\r\n        .style('fill', 'white')\r\n        .style('stroke', 'rgb(250, 200, 250)')\r\n        .style('stroke-width', 2)\r\n        //mouse events\r\n        .on('mouseover', mouseOverHandler)\r\n        .on('mouseout', mouseOutHandler)\r\n        .on('click', clickHandler);\r\n    };\r\n\r\n    //mouse events functions\r\n    const mouseOverHandler = (d, i) => {\r\n      console.log('mouseover');\r\n    };\r\n\r\n    const clickHandler = () => {\r\n      //1- remove the main map\r\n      //2- change it to the up left\r\n      //3- draw a new small map\r\n      //4- draom a new map for the next level, based on the selected polygone\r\n      console.log('click');\r\n\r\n      d3.select(this.thismap.current).selectAll('path').remove();\r\n      // mapsvg\r\n      //   .append('rect')\r\n      //   .attr('width', `${20}px`)\r\n      //   .attr('height', `${20}px`)\r\n      //   .style('border', '1px solid black')\r\n      //   .attr('transform', `translate(${0}, ${0})`);\r\n    };\r\n\r\n    const mouseOutHandler = () => {\r\n      console.log('mouseout');\r\n    };\r\n\r\n    // asynchronously load geojson:\r\n    //reading data\r\n\r\n    // console.log(map.features);\r\n    const removeMap = (where) => {\r\n      d3.select(where).selectAll('path').remove();\r\n    };\r\n    // provinceMap();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>this is the map2 section</p>\r\n        <div ref={this.thismap}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map2;\r\n\r\n//the next plan would be to add a mep of netherlands and assign it to the whole picture\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\box.jsx",["110","111","112"],"import React, {Component, createRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nclass Box extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  resizeObserver = null;\r\n  thismap = createRef();\r\n  state = {};\r\n  async componentDidMount(error, info) {\r\n    if ('ResizeObserver' in window) {\r\n      this.observe(ResizeObserver);\r\n    } else {\r\n      import('resize-observer-polyfill').then(this.observe);\r\n    }\r\n    async function Read() {}\r\n    const width = 400\r\n    const height = 400\r\n\r\n    const mapsvg = d3\r\n      .select(this.thismap.current)\r\n      .append('svg')\r\n      .attr('width', `${width}px`)\r\n      .attr('height', `${height}px`)\r\n      .style('border', '3px solid black')\r\n      .append('g');\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.resizeObserver) {\r\n      this.resizeObserver.disconnect();\r\n    }\r\n  }\r\n\r\n  observe = (RO) => {\r\n    this.resizeObserver = new RO((entries) => {\r\n      const {width, height, top, right, bottom, left} = entries[0].contentRect;\r\n      this.setState({width, height, top, right, bottom, left});\r\n    });\r\n\r\n    if (this.thismap.current) {\r\n      this.resizeObserver.observe(this.thismap.current);\r\n    }\r\n  };\r\n\r\n  render() {\r\n      console.log(this.state.height, this.state.width)\r\n    return (\r\n      \r\n        <div ref={this.thismap} className=\"border border-dark\">{this.mapsvg}</div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Box;\r\n\r\n//the next plan would be to add a mep of netherlands and assign it to the whole picture\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\boxfunction.jsx",["113","114"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n\r\nexport default function Boxfunction({width, height}) {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(async() => {\r\n\r\n\r\n    //removing svg\r\n    d3.select(svgRef.current).select('*').remove();\r\n    console.log(height, width)\r\n    //draw svg\r\n    const mapsvg1 = d3\r\n      .select(svgRef.current)\r\n      .append('svg')\r\n      .attr('width', `${width}px`)\r\n      .attr('height', `${width}px`)\r\n      .style('border', '2px solid black')\r\n      .append('g')\r\n\r\n      const myProj = d3\r\n      .geoMercator()\r\n      .center([6.0, 51.5])\r\n      .scale(3500)\r\n      .translate([width / 2, height / 2]);\r\n\r\n    const svgpath = d3.geoPath().projection(myProj);\r\n    //to load a file successfully it's coordinates should be transfered to wgs84 4326\r\n    const map = await d3.json('data/ov.json');\r\n    mapsvg1\r\n      .selectAll('path')\r\n      .data(map.features)\r\n      .enter()\r\n      // for each d create an svgpath that uses the geoPath generator:\r\n      .append('path')\r\n      //   .attr('class', 'municipality')\r\n      .attr('d', svgpath)\r\n      .style('fill', 'white')\r\n      .style('stroke', 'rgb(250, 200, 250)')\r\n      .style('stroke-width', 2)\r\n      \r\n  }, [height, width]);\r\n\r\n  return <div id=\"svg-chart\" ref={svgRef}></div>;\r\n}\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\boxfunction1.jsx",["115"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as turf from '@turf/turf'\r\n\r\nexport default function Boxfunction1({city, width, height}) {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    //removing svg\r\n    d3.select(svgRef.current).select('*').remove();\r\n    console.log(height, width, city);\r\n    //draw svg\r\n    const mapsvg = d3\r\n      .select(svgRef.current)\r\n      .append('svg')\r\n      .attr('width', `${width}px`)\r\n      .attr('height', `${height}px`)\r\n      .style('border', '2px solid black')\r\n      .append('g');\r\n\r\n      let mapfeatuer = {}\r\n      d3.json('data/overijssel.json').then((map) => {\r\n        for (let feature of map.features) {\r\n          // console.log(feature)\r\n          if (feature.properties.gm_naam === city) {\r\n            mapfeatuer = feature\r\n            var centroid = turf.centroid(mapfeatuer);\r\n            console.log(centroid)\r\n          }\r\n        }\r\n    const myProj = d3\r\n      .geoMercator()\r\n      .center(centroid ? centroid.geometry.coordinates : [0, 0])\r\n      .scale(15000)\r\n      .translate([width / 2, width / 2]);\r\n\r\n    const svgpath = d3.geoPath().projection(myProj);\r\n    //to load a file successfully it's coordinates should be transfered to wgs84 4326\r\n        mapsvg\r\n        .selectAll('path')\r\n        .data([mapfeatuer])\r\n        .enter()\r\n        // for each d create an svgpath that uses the geoPath generator:\r\n        .append('path')\r\n        //   .attr('class', 'municipality')\r\n        .attr('d', svgpath)\r\n        .style('fill', 'rgb(250, 200, 250)')\r\n        .style('stroke', 'rgb(250, 200, 250)')\r\n        .style('stroke-width', 2);\r\n    })\r\n    \r\n  }, [height, width, city]);\r\n\r\n  return <div id=\"svg-chart\" ref={svgRef}></div>;\r\n}\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\smallProvince.jsx",["116","117","118","119"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as turf from '@turf/turf';\r\nimport PathProjection from './tools/pathProjection';\r\n\r\nexport default function SmallProvince({handleClick, province, width, height, city}) {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const handle = () => {\r\n      handleClick();\r\n    };\r\n    //removing svg\r\n    d3.select(svgRef.current).select('*').remove();\r\n    // console.log(height, width, country);\r\n    //draw svg\r\n    const mapsvg = d3\r\n      .select(svgRef.current)\r\n      .append('svg')\r\n      .attr('width', `${width}px`)\r\n      .attr('height', `${height}px`)\r\n      // .style('border', '2px solid black')\r\n      .append('g');\r\n\r\n    //to add background color\r\n    mapsvg\r\n      .append('rect')\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('fill', 'rgb(65, 83, 83)');\r\n\r\n    var projection = d3\r\n      .geoConicConformal()\r\n      .scale(19000) // value I would like to which when the region changes\r\n      .center([4.45, 50.53]) // value I would like to which when the region changes\r\n      .translate([width / 2, height / 2]);\r\n\r\n    var svgpath = d3.geoPath().projection(projection);\r\n\r\n    d3.json(`data/${province.toLowerCase()}.geojson`).then((map) => {\r\n      projection.fitSize([height, width], map);\r\n\r\n      // const svgpath = PathProjection(turf.centroid(map).geometry.coordinates, 230,[height / 2 + 90, width / 2 - 30])\r\n\r\n      //to load a file successfully it's coordinates should be transfered to wgs84 4326\r\n      mapsvg\r\n        .selectAll('path')\r\n        .data(map.features)\r\n        .enter()\r\n        // for each d create an svgpath that uses the geoPath generator:\r\n        .append('path')\r\n        //   .attr('class', 'municipality')\r\n        .attr('d', svgpath)\r\n        .style('fill', (d, i) =>\r\n          d.properties.gm_naam === city ? 'blue' : 'rgb(60, 60, 60)'\r\n        )\r\n        .style('stroke', 'white')\r\n        .style('stroke-width', 0.5)\r\n        .on('click', function (d, i) {\r\n          console.log(i.properties.admin);\r\n          handle();\r\n        });\r\n    });\r\n  }, [height, width, city]);\r\n\r\n  return <div id=\"svg-chart\" ref={svgRef}></div>;\r\n}\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\tools\\pathProjection.jsx",[],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\MainWorld.jsx",["120","121","122","123"],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\smallWorld.jsx",["124","125","126"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as turf from '@turf/turf';\r\nimport PathProjection from './tools/pathProjection';\r\n\r\nexport default function SmallWorld({country, width, height, handleClick}) {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const handle = () => {\r\n      handleClick();\r\n    };\r\n    //removing svg\r\n    d3.select(svgRef.current).select('*').remove();\r\n    console.log(height, width, country);\r\n    //draw svg\r\n    const mapsvg = d3\r\n      .select(svgRef.current)\r\n      .append('svg')\r\n      .attr('width', `${width}px`)\r\n      .attr('height', `${height}px`)\r\n      // .style('border', '2px solid black')\r\n      .append('g');\r\n\r\n    //to add background color\r\n    mapsvg\r\n      .append('rect')\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('fill', 'rgb(65, 83, 83)');\r\n\r\n    let mapfeatuer = {};\r\n    d3.json('data/europe.json').then((map) => {\r\n      const svgpath = PathProjection(\r\n        turf.centroid(map).geometry.coordinates,\r\n        230,\r\n        [height / 2 + 90, width / 2 - 30]\r\n      );\r\n\r\n      //to load a file successfully it's coordinates should be transfered to wgs84 4326\r\n      mapsvg\r\n        .selectAll('path')\r\n        .data(map.features)\r\n        .enter()\r\n        // for each d create an svgpath that uses the geoPath generator:\r\n        .append('path')\r\n        //   .attr('class', 'municipality')\r\n        .attr('d', svgpath)\r\n        .style('fill', (d, i) =>\r\n          d.properties.admin === country ? 'blue' : 'rgb(60, 60, 60)'\r\n        )\r\n        .style('stroke', 'white')\r\n        .style('stroke-width', 0.4)\r\n        .on('click', function (d, i) {\r\n          console.log(i.properties.admin);\r\n          handle();\r\n        });\r\n    });\r\n  }, [height, width, country]);\r\n\r\n  return <div id=\"svg-chart\" ref={svgRef}></div>;\r\n}\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mainCountry.jsx",["127","128","129","130","131"],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\mainProvince.jsx",["132","133","134","135"],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\smallCountry.jsx",["136","137","138","139"],"C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\barChart.jsx",["140","141","142","143"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nexport default function BarChart({width, height, selectedCountry, handleBarchartOver}) {\r\n  const svgRef = useRef();\r\n  const margin = {left: 15, right: 15, bottom: 45, top: 15};\r\n\r\n  //to update barchart\r\n  \r\n  useEffect(() => {\r\n\r\n    const mouseOver = (i, country, tooltip) => {\r\n      tooltip.style('visibility', 'visible').text();\r\n      handleBarchartOver(country)\r\n    }\r\n    //to read the data\r\n    d3.json('data/europe.json').then((data) => {\r\n      d3.select(svgRef.current).select('*').remove();\r\n    //creating the range for the x values\r\n    const x = d3\r\n    .scaleBand()\r\n    .domain(data.features.map((d) => d.properties.admin))\r\n    .range([margin.left, width - margin.right])\r\n    .padding(0.1);\r\n    \r\n    //creating the range for the y values\r\n    const y = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.max(data.features, (d) => d.properties.pop_est)])\r\n    .nice()\r\n    .range([height - margin.bottom, margin.top]);\r\n    \r\n    //creating the main svg element\r\n    const svg = d3\r\n    .select(svgRef.current)\r\n    .append('svg')\r\n    .attr('viewBox', [0, 0, width, height]);\r\n    \r\n    //call tooltip\r\n    // tooltip;\r\n    \r\n      //creating barchart elements\r\n      const bar = svg\r\n        .append('g')\r\n        .attr('fill', 'steelblue')\r\n        .selectAll('rect')\r\n        .data(data.features)\r\n        .enter()\r\n        .append('rect')\r\n        .style('mix-blend-mode', 'multiply')\r\n        .attr('x', (d) => x(d.properties.admin))\r\n        .attr('y', (d) => y(d.properties.pop_est))\r\n        .attr('height', (d) => y(0) - y(d.properties.pop_est))\r\n        .attr('width', x.bandwidth())\r\n        .attr('fill', (d) => d.properties.admin === selectedCountry? 'red': 'blue')\r\n        // .attr('fill', (d,i) => d.properties.admin === selectedCountry? '#FDE5BD': 'white')\r\n        .text((d) => d)\r\n        .on('mouseover', function (i, d) {\r\n          \r\n          d3.select(this).attr('fill', '#FDE5BD');\r\n          mouseOver(i, d.properties.admin, tooltip)\r\n        })\r\n        .on('mousemove', (i, d) => {\r\n          tooltip\r\n            .style('top', i.clientY - 10 + 'px')\r\n            .style('left', i.clientX + 10 + 'px')\r\n            .text(d.properties.admin);\r\n        })\r\n        .on('mouseout', function (i, d) {\r\n          tooltip.style('visibility', 'hidden');\r\n          d3.select(this).attr('fill', 'steelblue');\r\n        });\r\n      \r\n\r\n      //xaxis element of the barchart\r\n      const xAxis = (g) =>\r\n        g\r\n          .attr('transform', `translate(0,${height - margin.bottom})`)\r\n          .call(d3.axisBottom(x).tickSizeOuter(0));\r\n\r\n      svg\r\n        .append('g')\r\n        .attr('class', 'x axis')\r\n        .attr('transform', 'translate(0,' + height + ')')\r\n        .call(xAxis)\r\n        // .call(yAxis)\r\n        .selectAll('text')\r\n        .attr('y', 0)\r\n        .attr('x', 9)\r\n        .attr('dy', '.35em')\r\n        .attr('transform', 'rotate(90)')\r\n        .style('text-anchor', 'start');\r\n\r\n      //yaxis element of the barchart\r\n      const yAxis = (g) =>\r\n        g\r\n          .attr('transform', `translate(${margin.left},0)`)\r\n          .call(d3.axisLeft(y))\r\n          .call((g) => g.select('.domain').remove());\r\n\r\n      const gy = svg\r\n        .append('g')\r\n        .call(yAxis)\r\n        .selectAll('text')\r\n        .attr('y', 0)\r\n        .attr('x', -30)\r\n        .attr('dy', '.35em')\r\n        .style('text-anchor', 'start');\r\n\r\n      //to define the tooltip\r\n      const tooltip = d3\r\n        .select('body')\r\n        .append('div')\r\n        .style('position', 'absolute')\r\n        .style('font-family', \"'Open Sans', sans-serif\")\r\n        .style('font-size', '15px')\r\n        .style('z-index', '10')\r\n        .style('background-color', '#A7CDFA')\r\n        .style('color', '#B380BA')\r\n        .style('border', 'solid')\r\n        .style('border-color', '#A89ED6')\r\n        .style('padding', '5px')\r\n        .style('border-radius', '2px')\r\n        .style('visibility', 'hidden');\r\n    });\r\n  }, [height, width, selectedCountry]);\r\n\r\n  return <div id=\"svg-chart\" ref={svgRef}></div>;\r\n}\r\n","C:\\Users\\user\\Desktop\\JS\\d3maps\\src\\component\\pieChart.jsx",["144","145","146","147"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\nimport {color} from 'd3';\r\n// import useResizeObserver from 'use-resize-observer';\r\n\r\nexport default function Piechart({width, height, dat}) {\r\n  //   const [data, setData] = useState([7,8, 80, 9, 12, 13, 10, 11, 12]);\r\n  //   const [wid, setWid] = React.useState(width);\r\n  //   setWid = () => {\r\n  //     wid = this.props.width;\r\n  //   };\r\n  const svgRef = useRef();\r\n  //\r\n  //a function for identifying the type of dataset\r\n  //   const incomeExport = (object) => {\r\n  //     console.log(data[0]);\r\n  //     for (const key in data[0]) {\r\n  //       if (key === 'reward') return 'reward';\r\n  //       else if (key === 'expenditure') return 'expenditure';\r\n  //       else if (key === 'title') return 'title';\r\n  //     }\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    //   const {data} = this.props\r\n    // const IncomeOrExpense = incomeExport(data[0]);\r\n    const datab = [\r\n      {label: 'Assamese', count: 13},\r\n      {label: 'Bengali', count: 83},\r\n      {label: 'Bodo', count: 1.4},\r\n      {label: 'Dogri', count: 2.3},\r\n      {label: 'Gujarati', count: 46},\r\n      {label: 'Hindi', count: 300},\r\n      {label: 'Kannada', count: 38},\r\n      {label: 'Kashmiri', count: 5.5},\r\n      {label: 'Konkani', count: 5},\r\n      {label: 'Maithili', count: 20},\r\n      {label: 'Malayalam', count: 33},\r\n      {label: 'Manipuri', count: 1.5},\r\n      {label: 'Marathi', count: 72},\r\n      {label: 'Nepali', count: 2.9},\r\n      {label: 'Oriya', count: 33},\r\n      {label: 'Punjabi', count: 29},\r\n      {label: 'Sanskrit', count: 0.01},\r\n      {label: 'Santhali', count: 6.5},\r\n      {label: 'Sindhi', count: 2.5},\r\n      {label: 'Tamil', count: 61},\r\n      {label: 'Telugu', count: 74},\r\n      {label: 'Urdu', count: 52},\r\n    ];\r\n\r\n    const dataa = [\r\n      {label: 'Assamese', count: 13},\r\n      {label: 'Bengali', count: 83},\r\n      {label: 'Bodo', count: 1.4},\r\n      {label: 'Dogri', count: 2.3},\r\n      {label: 'Gujarati', count: 46},\r\n      {label: 'Hindi', count: 300},\r\n      {label: 'Kannada', count: 38},\r\n      {label: 'Kashmiri', count: 5.5},\r\n\r\n    ];\r\n\r\n    const radius = 50;\r\n\r\n    // svg.append('g').attr('class', 'slices');\r\n    // svg.append('g').attr('class', 'labels');\r\n    // svg.append('g').attr('class', 'lines');\r\n\r\n    // define color scale\r\n    const color = d3.scaleOrdinal(d3.schemeAccent);\r\n    // const {width} = this.props;\r\n    // const colorScale = d3\r\n    //   .scaleSequential()\r\n    //   .interpolator(d3.interpolateCool)\r\n    //   .domain([5, data.length]);\r\n\r\n    //removing svg\r\n    // d3.select(svgRef.current).select('*').remove();\r\n\r\n    //draw svg\r\n    const svg = d3\r\n      .select(svgRef.current)\r\n      .append('svg')\r\n      .attr('width', `${height}px`)\r\n      .attr('height', `${width}px`)\r\n      .style('border', '10px solid white')\r\n      .append('g')\r\n      .attr('transform', `translate(${width / 2}, ${width / 2})`);\r\n\r\n    //arc  generator, one of the generators\r\n    let arcGenerator = d3.arc().innerRadius(0).outerRadius(radius);\r\n\r\n    // pie generator\r\n    const pieGenerator = d3\r\n      .pie()\r\n      .padAngle(0)\r\n      .value((d) => {\r\n        console.log(d.count)\r\n        return d.count\r\n      })\r\n      .sort(null);\r\n\r\n    //get information from data\r\n    dataa.forEach(function (d) {\r\n      d.count = +d.count; // calculate count as we iterate through the data\r\n      d.enabled = true; // add enabled property to track which entries are checked\r\n      console.log(d.count)\r\n    });\r\n    console.log(dataa)\r\n    // creating the chart\r\n    var pathh = svg\r\n      .selectAll('path') // select all path elements inside the svg. specifically the 'g' element. they don't exist yet but they will be created below\r\n      .data(pieGenerator(dataa)) //associate dataset wit he path elements we're about to create. must pass through the pie function. it magically knows how to extract values and bakes it into the pie\r\n      .enter() //creates placeholder nodes for each of the values\r\n      .append('path') // replace placeholders with path elements\r\n      .attr('d', arcGenerator)\r\n     \r\n      .on(\"mouseover\", function(d) {\r\n        console.log(d)\r\n        arcGenerator = d3.arc().innerRadius(0).outerRadius(radius+10);\r\n        d3.select(this)\r\n        .transition()\r\n        // .merge(pathh)\r\n        .duration(500)\r\n        .attr('d', arcGenerator)\r\n      })\r\n      .on(\"mouseout\", function(d) {\r\n        console.log(d)\r\n        arcGenerator = d3.arc().innerRadius(0).outerRadius(radius);\r\n        d3.select(this)\r\n        .transition()\r\n        // .merge(pathh)\r\n        .duration(500)\r\n        .attr('d', arcGenerator)\r\n      })\r\n       // define d attribute with arc function above\r\n      .attr('fill', function (d) {\r\n        return color(d.data.label);\r\n      })\r\n      ; // use color scale to define fill of each label in dataset\r\n    // .each(function (d) {\r\n    //   this._current - d;\r\n    // }); // creates a smooth animation for each track\r\n\r\n    // mouse event handlers are attached to path so they need to come after its definition\r\n    // path.on('mouseover', function(d) {  // when mouse enters div\r\n    // var total = d3.sum(dataset.map(function(d) { // calculate the total number of tickets in the dataset\r\n    // return (d.enabled) ? d.count : 0; // checking to see if the entry is enabled. if it isn't, we return 0 and cause other percentages to increase\r\n    // }));\r\n    //add the new svg\r\n    // const arc = svg.selectAll().data(pieGenerator(data)).enter();\r\n\r\n    // // Append sectors\r\n    // arc\r\n    //   .append('path')\r\n    //   .attr('d', arcGenerator)\r\n    //   .style('fill', (_, i) => colorScale(i))\r\n    //   .style('stroke', 'white')\r\n    //   .style('stroke-width', 2);\r\n\r\n    //append text\r\n    // arc\r\n    //   .append('text')\r\n    //   .attr('text-anchor', 'middle')\r\n    //   .attr('alignment-baseline', 'middle')\r\n    //   .text((d, i) => i + 1)\r\n    //   .style('fill', '#ffffff')\r\n    //   .attr('transform', (d) => {\r\n    //     const [x, y] = arcGenerator.centroid(d);\r\n    //     return `translate(${x}, ${y})`;\r\n    //   });\r\n    // arc.exit().remove()\r\n    // arc.transition().duration(500)\r\n    //the last piece is actually about the re-rendering conditions\r\n  }, [width, height]);\r\n\r\n  return <div id=\"svg-chart\" ref={svgRef}></div>;\r\n}\r\n",{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":5,"column":8,"nodeType":"154","messageId":"155","endLine":5,"endColumn":15},{"ruleId":"152","severity":1,"message":"156","line":7,"column":8,"nodeType":"154","messageId":"155","endLine":7,"endColumn":11},{"ruleId":"152","severity":1,"message":"157","line":8,"column":13,"nodeType":"154","messageId":"155","endLine":8,"endColumn":15},{"ruleId":"152","severity":1,"message":"158","line":9,"column":8,"nodeType":"154","messageId":"155","endLine":9,"endColumn":16},{"ruleId":"152","severity":1,"message":"159","line":10,"column":8,"nodeType":"154","messageId":"155","endLine":10,"endColumn":11},{"ruleId":"152","severity":1,"message":"160","line":11,"column":8,"nodeType":"154","messageId":"155","endLine":11,"endColumn":17},{"ruleId":"152","severity":1,"message":"161","line":12,"column":8,"nodeType":"154","messageId":"155","endLine":12,"endColumn":12},{"ruleId":"152","severity":1,"message":"162","line":14,"column":8,"nodeType":"154","messageId":"155","endLine":14,"endColumn":19},{"ruleId":"152","severity":1,"message":"163","line":15,"column":8,"nodeType":"154","messageId":"155","endLine":15,"endColumn":20},{"ruleId":"164","severity":1,"message":"165","line":25,"column":3,"nodeType":"166","messageId":"167","endLine":27,"endColumn":4},{"ruleId":"168","severity":1,"message":"169","line":103,"column":15,"nodeType":"154","messageId":"170","endLine":103,"endColumn":22},{"ruleId":"168","severity":1,"message":"171","line":112,"column":22,"nodeType":"154","messageId":"170","endLine":112,"endColumn":36},{"ruleId":"168","severity":1,"message":"172","line":121,"column":27,"nodeType":"154","messageId":"170","endLine":121,"endColumn":46},{"ruleId":"168","severity":1,"message":"173","line":130,"column":16,"nodeType":"154","messageId":"170","endLine":130,"endColumn":24},{"ruleId":"168","severity":1,"message":"174","line":139,"column":12,"nodeType":"154","messageId":"170","endLine":139,"endColumn":16},{"ruleId":"152","severity":1,"message":"175","line":172,"column":11,"nodeType":"154","messageId":"155","endLine":172,"endColumn":17},{"ruleId":"152","severity":1,"message":"176","line":1,"column":27,"nodeType":"154","messageId":"155","endLine":1,"endColumn":36},{"ruleId":"152","severity":1,"message":"157","line":2,"column":13,"nodeType":"154","messageId":"155","endLine":2,"endColumn":15},{"ruleId":"152","severity":1,"message":"177","line":29,"column":11,"nodeType":"154","messageId":"155","endLine":29,"endColumn":19},{"ruleId":"152","severity":1,"message":"178","line":30,"column":7,"nodeType":"154","messageId":"155","endLine":30,"endColumn":16},{"ruleId":"152","severity":1,"message":"179","line":33,"column":7,"nodeType":"154","messageId":"155","endLine":33,"endColumn":10},{"ruleId":"152","severity":1,"message":"176","line":1,"column":27,"nodeType":"154","messageId":"155","endLine":1,"endColumn":36},{"ruleId":"152","severity":1,"message":"180","line":33,"column":11,"nodeType":"154","messageId":"155","endLine":33,"endColumn":22},{"ruleId":"152","severity":1,"message":"181","line":102,"column":11,"nodeType":"154","messageId":"155","endLine":102,"endColumn":20},{"ruleId":"164","severity":1,"message":"165","line":5,"column":3,"nodeType":"166","messageId":"167","endLine":7,"endColumn":4},{"ruleId":"152","severity":1,"message":"182","line":17,"column":20,"nodeType":"154","messageId":"155","endLine":17,"endColumn":24},{"ruleId":"152","severity":1,"message":"183","line":21,"column":11,"nodeType":"154","messageId":"155","endLine":21,"endColumn":17},{"ruleId":"152","severity":1,"message":"184","line":1,"column":16,"nodeType":"154","messageId":"155","endLine":1,"endColumn":24},{"ruleId":"185","severity":1,"message":"186","line":8,"column":13,"nodeType":"187","endLine":44,"endColumn":4},{"ruleId":"152","severity":1,"message":"184","line":1,"column":16,"nodeType":"154","messageId":"155","endLine":1,"endColumn":24},{"ruleId":"152","severity":1,"message":"184","line":1,"column":16,"nodeType":"154","messageId":"155","endLine":1,"endColumn":24},{"ruleId":"152","severity":1,"message":"188","line":3,"column":13,"nodeType":"154","messageId":"155","endLine":3,"endColumn":17},{"ruleId":"152","severity":1,"message":"189","line":4,"column":8,"nodeType":"154","messageId":"155","endLine":4,"endColumn":22},{"ruleId":"185","severity":1,"message":"190","line":64,"column":6,"nodeType":"191","endLine":64,"endColumn":27,"suggestions":"192"},{"ruleId":"152","severity":1,"message":"184","line":1,"column":16,"nodeType":"154","messageId":"155","endLine":1,"endColumn":24},{"ruleId":"152","severity":1,"message":"193","line":57,"column":9,"nodeType":"154","messageId":"155","endLine":57,"endColumn":19},{"ruleId":"152","severity":1,"message":"194","line":61,"column":13,"nodeType":"154","messageId":"155","endLine":61,"endColumn":25},{"ruleId":"185","severity":1,"message":"195","line":135,"column":6,"nodeType":"191","endLine":135,"endColumn":38,"suggestions":"196"},{"ruleId":"152","severity":1,"message":"184","line":1,"column":16,"nodeType":"154","messageId":"155","endLine":1,"endColumn":24},{"ruleId":"152","severity":1,"message":"193","line":32,"column":9,"nodeType":"154","messageId":"155","endLine":32,"endColumn":19},{"ruleId":"185","severity":1,"message":"197","line":59,"column":6,"nodeType":"191","endLine":59,"endColumn":30,"suggestions":"198"},{"ruleId":"152","severity":1,"message":"184","line":1,"column":16,"nodeType":"154","messageId":"155","endLine":1,"endColumn":24},{"ruleId":"152","severity":1,"message":"188","line":3,"column":13,"nodeType":"154","messageId":"155","endLine":3,"endColumn":17},{"ruleId":"152","severity":1,"message":"189","line":4,"column":8,"nodeType":"154","messageId":"155","endLine":4,"endColumn":22},{"ruleId":"152","severity":1,"message":"193","line":66,"column":9,"nodeType":"154","messageId":"155","endLine":66,"endColumn":19},{"ruleId":"185","severity":1,"message":"199","line":153,"column":6,"nodeType":"191","endLine":153,"endColumn":21,"suggestions":"200"},{"ruleId":"152","severity":1,"message":"188","line":3,"column":13,"nodeType":"154","messageId":"155","endLine":3,"endColumn":17},{"ruleId":"164","severity":1,"message":"165","line":6,"column":3,"nodeType":"166","messageId":"167","endLine":9,"endColumn":4},{"ruleId":"152","severity":1,"message":"201","line":37,"column":11,"nodeType":"154","messageId":"155","endLine":37,"endColumn":17},{"ruleId":"152","severity":1,"message":"202","line":91,"column":11,"nodeType":"154","messageId":"155","endLine":91,"endColumn":15},{"ruleId":"152","severity":1,"message":"184","line":1,"column":16,"nodeType":"154","messageId":"155","endLine":1,"endColumn":24},{"ruleId":"152","severity":1,"message":"188","line":3,"column":13,"nodeType":"154","messageId":"155","endLine":3,"endColumn":17},{"ruleId":"152","severity":1,"message":"189","line":4,"column":8,"nodeType":"154","messageId":"155","endLine":4,"endColumn":22},{"ruleId":"185","severity":1,"message":"190","line":70,"column":6,"nodeType":"191","endLine":70,"endColumn":30,"suggestions":"203"},{"ruleId":"152","severity":1,"message":"184","line":1,"column":16,"nodeType":"154","messageId":"155","endLine":1,"endColumn":24},{"ruleId":"152","severity":1,"message":"204","line":43,"column":13,"nodeType":"154","messageId":"155","endLine":43,"endColumn":16},{"ruleId":"152","severity":1,"message":"205","line":101,"column":13,"nodeType":"154","messageId":"155","endLine":101,"endColumn":15},{"ruleId":"185","severity":1,"message":"206","line":126,"column":6,"nodeType":"191","endLine":126,"endColumn":38,"suggestions":"207"},{"ruleId":"152","severity":1,"message":"184","line":1,"column":16,"nodeType":"154","messageId":"155","endLine":1,"endColumn":24},{"ruleId":"152","severity":1,"message":"208","line":3,"column":9,"nodeType":"154","messageId":"155","endLine":3,"endColumn":14},{"ruleId":"152","severity":1,"message":"209","line":27,"column":11,"nodeType":"154","messageId":"155","endLine":27,"endColumn":16},{"ruleId":"152","severity":1,"message":"210","line":112,"column":9,"nodeType":"154","messageId":"155","endLine":112,"endColumn":14},"no-native-reassign",["211"],"no-negated-in-lhs",["212"],"no-unused-vars","'datamap' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'d3' is defined but never used.","'ReactDOM' is defined but never used.","'Map' is defined but never used.","'MapBoston' is defined but never used.","'Map2' is defined but never used.","'Boxfunction' is defined but never used.","'Boxfunction1' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-self-assign","'country' is assigned to itself.","selfAssignment","'countryOverMap' is assigned to itself.","'countryOverBarchart' is assigned to itself.","'province' is assigned to itself.","'city' is assigned to itself.","'window' is assigned a value but never used.","'createRef' is defined but never used.","'mapWidth' is assigned a value but never used.","'mapHeight' is assigned a value but never used.","'map' is assigned a value but never used.","'provinceMap' is assigned a value but never used.","'removeMap' is assigned a value but never used.","'Read' is defined but never used.","'mapsvg' is assigned a value but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'turf' is defined but never used.","'PathProjection' is defined but never used.","React Hook useEffect has missing dependencies: 'handleClick' and 'province'. Either include them or remove the dependency array. If 'handleClick' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["213"],"'mapfeatuer' is assigned a value but never used.","'bounding_box' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleCountryName' and 'handleCountryOver'. Either include them or remove the dependency array. If 'handleCountryName' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["214"],"React Hook useEffect has a missing dependency: 'handleClick'. Either include it or remove the dependency array. If 'handleClick' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["215"],"React Hook useEffect has missing dependencies: 'country' and 'provinceName'. Either include them or remove the dependency array. If 'provinceName' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["216"],"'handle' is assigned a value but never used.","'data' is assigned a value but never used.",["217"],"'bar' is assigned a value but never used.","'gy' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleBarchartOver', 'margin.bottom', 'margin.left', 'margin.right', and 'margin.top'. Either include them or remove the dependency array. If 'handleBarchartOver' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["218"],"'color' is defined but never used.","'datab' is assigned a value but never used.","'pathh' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},"Update the dependencies array to be: [height, width, city, province, handleClick]",{"range":"231","text":"232"},"Update the dependencies array to be: [height, width, selectedCountry, handleCountryName, handleCountryOver]",{"range":"233","text":"234"},"Update the dependencies array to be: [height, width, country, handleClick]",{"range":"235","text":"236"},"Update the dependencies array to be: [country, height, provinceName, width]",{"range":"237","text":"238"},"Update the dependencies array to be: [height, width, country, handleClick, province]",{"range":"239","text":"240"},"Update the dependencies array to be: [height, width, selectedCountry, handleBarchartOver, margin.left, margin.right, margin.bottom, margin.top]",{"range":"241","text":"242"},[2131,2152],"[height, width, city, province, handleClick]",[4308,4340],"[height, width, selectedCountry, handleCountryName, handleCountryOver]",[1789,1813],"[height, width, country, handleClick]",[5116,5131],"[country, height, provinceName, width]",[2135,2159],"[height, width, country, handleClick, province]",[4033,4065],"[height, width, selectedCountry, handleBarchartOver, margin.left, margin.right, margin.bottom, margin.top]"]